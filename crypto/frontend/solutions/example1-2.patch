diff --git a/crypto/frontend/scenes/Greetings.js b/crypto/frontend/scenes/Greetings.js
new file mode 100644
index 0000000000000000000000000000000000000000..79a9efe2e921cfce4af279d686c6f599a40288da
--- /dev/null
+++ b/crypto/frontend/scenes/Greetings.js
@@ -0,0 +1,44 @@
+import {useEffect, useState} from 'react';
+
+const fetchGraphQL = async (query, variables) => {
+  const response = await fetch('http://localhost:5000/graphql', {
+    method: 'POST',
+    headers: {
+      'Content-Type': 'application/json',
+    },
+    body: JSON.stringify({
+      query,
+      variables,
+    }),
+  });
+
+  return await response.json();
+};
+
+export default function Greetings() {
+  const [greetings, setGreetings] = useState(null);
+
+  useEffect(() => {
+    let mounted = true;
+
+    fetchGraphQL(`
+      query GreetingsQuery {
+        greetings
+      }
+    `)
+      .then((response) => {
+        if (!mounted) {
+          setGreetings(response.data.greetings);
+        }
+      })
+      .catch((error) => {
+        console.error(error);
+      });
+
+    return () => {
+      mounted = false;
+    };
+  }, []);
+
+  return <div>{greetings}</div>;
+}
diff --git a/crypto/frontend/pages/index.js b/crypto/frontend/pages/index.js
index 8b3e2fa25f805f5e59f6da3bc19b8f1365bbb124..935a8df2b0f3a189e95f14f6350cd9234b896d36 100644
--- a/crypto/frontend/pages/index.js
+++ b/crypto/frontend/pages/index.js
@@ -1 +1 @@
-export {Dummy as default} from '@/components';
+export {default} from '@/scenes/Greetings';
diff --git a/crypto/frontend/schema/server.graphql b/crypto/frontend/schema/server.graphql
new file mode 100644
index 0000000000000000000000000000000000000000..f8d6abc88acdb140458f0cf9dc13433ac41ba4c9
--- /dev/null
+++ b/crypto/frontend/schema/server.graphql
@@ -0,0 +1,38 @@
+"""
+The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`.
+"""
+directive @defer(
+  """
+  Deferred when true.
+  """
+  if: Boolean
+
+  """
+  If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to.
+  """
+  label: String
+) on FRAGMENT_SPREAD | INLINE_FRAGMENT
+
+"""
+The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`.
+"""
+directive @stream(
+  """
+  Streamed when true.
+  """
+  if: Boolean
+
+  """
+  The initial elements that shall be send down to the consumer.
+  """
+  initialCount: Int! = 0
+
+  """
+  If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to.
+  """
+  label: String
+) on FIELD
+
+type Query {
+  greetings(name: String! = "Luke"): String!
+}
