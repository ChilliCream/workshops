diff --git a/crypto/frontend/scenes/settings/SettingsCredentials.js b/crypto/frontend/scenes/settings/SettingsCredentials.js
new file mode 100644
index 0000000000000000000000000000000000000000..e513581d7c84842de5a2bcdb6d8428b3343ee5f0
--- /dev/null
+++ b/crypto/frontend/scenes/settings/SettingsCredentials.js
@@ -0,0 +1,78 @@
+import {
+  AccordionActions,
+  AccordionDetails,
+  Button,
+  Stack,
+  TextField,
+} from '@mui/material';
+import {memo, useRef} from 'react';
+
+import {PasswordField} from '@/components';
+import {Config, syncWithStorage} from '@/config';
+import {CredentialsIcon} from '@/icons';
+
+import {Group} from './Group';
+
+export default memo(function SettingsCredentials({active, onChange}) {
+  const usernameRef = useRef(null);
+  const passwordRef = useRef(null);
+
+  return (
+    <Group
+      id="credentials"
+      icon={CredentialsIcon}
+      title="Credentials"
+      active={active}
+      onChange={onChange}
+    >
+      <form
+        name="credentials"
+        onSubmit={(e) => {
+          e.preventDefault();
+
+          const username = usernameRef.current?.value?.trim();
+          const password = passwordRef.current?.value?.trim();
+          const token =
+            username && password
+              ? Buffer.from(`${username}:${password}`).toString('base64')
+              : null;
+
+          syncWithStorage({
+            USERNAME: username,
+            PASSWORD: password,
+            AUTH_TOKEN: token,
+          });
+        }}
+      >
+        <AccordionDetails id="panel-credentials-content" sx={{p: 6}}>
+          <Stack direction="column" gap={8}>
+            <TextField
+              inputRef={usernameRef}
+              label="Username"
+              defaultValue={Config.USERNAME}
+              autoComplete="username"
+              fullWidth
+            />
+            <PasswordField
+              inputRef={passwordRef}
+              label="Password"
+              defaultValue={Config.PASSWORD}
+              autoComplete="current-password"
+              fullWidth
+            />
+          </Stack>
+        </AccordionDetails>
+        <AccordionActions
+          sx={{flexDirection: 'row-reverse', justifyContent: 'flex-start'}}
+        >
+          <Button type="submit" color="primary">
+            Save
+          </Button>
+          <Button type="reset" color="secondary">
+            Cancel
+          </Button>
+        </AccordionActions>
+      </form>
+    </Group>
+  );
+});
diff --git a/crypto/frontend/pages/_app.js b/crypto/frontend/pages/_app.js
index 8538cf3da3d9b697b1504a3947910a1823bea109..d430ee8773ac608e702e9e8de2c6123554c3745c 100644
--- a/crypto/frontend/pages/_app.js
+++ b/crypto/frontend/pages/_app.js
@@ -1,7 +1,9 @@
 import {CacheProvider} from '@emotion/react';
 import {CssBaseline, ThemeProvider} from '@mui/material';
 import {useEffect} from 'react';
+import {RelayEnvironmentProvider} from 'react-relay';
 
+import {useEnvironment} from '@/client';
 import {
   Content,
   Hacks,
@@ -19,6 +21,7 @@ export default function MyApp({
   emotionCache = clientSideEmotionCache,
   pageProps,
 }) {
+  const environment = useEnvironment(pageProps.initialRecords);
   const [theme, mode] = usePreferredTheme();
 
   useEffect(() => {
@@ -28,19 +31,21 @@ export default function MyApp({
   }, []);
 
   return (
-    <CacheProvider value={emotionCache}>
-      <ThemeProvider theme={theme}>
-        <ModeProvider value={mode}>
-          <Metadata />
-          <CssBaseline enableColorScheme />
-          <SlotsProvider>
-            <Content>
-              <Component {...pageProps} />
-            </Content>
-          </SlotsProvider>
-          <Hacks />
-        </ModeProvider>
-      </ThemeProvider>
-    </CacheProvider>
+    <RelayEnvironmentProvider environment={environment}>
+      <CacheProvider value={emotionCache}>
+        <ThemeProvider theme={theme}>
+          <ModeProvider value={mode}>
+            <Metadata />
+            <CssBaseline enableColorScheme />
+            <SlotsProvider>
+              <Content variant="crypto">
+                <Component {...pageProps} />
+              </Content>
+            </SlotsProvider>
+            <Hacks />
+          </ModeProvider>
+        </ThemeProvider>
+      </CacheProvider>
+    </RelayEnvironmentProvider>
   );
 }
diff --git a/crypto/frontend/scenes/index.js b/crypto/frontend/scenes/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..1bf359a678d71f0f3c9d18a81f4f9a146ae64db2
--- /dev/null
+++ b/crypto/frontend/scenes/index.js
@@ -0,0 +1,2 @@
+export * from './dashboard';
+export * from './settings';
diff --git a/crypto/frontend/client/index.js b/crypto/frontend/client/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..ba7f1d72553d0d6282bda51657fa7260a2aa6322
--- /dev/null
+++ b/crypto/frontend/client/index.js
@@ -0,0 +1,286 @@
+import extractFiles from 'extract-files/extractFiles.mjs';
+import isExtractableFile from 'extract-files/isExtractableFile.mjs';
+import {createClient} from 'graphql-ws';
+import {meros} from 'meros/browser';
+import {useMemo} from 'react';
+import {
+  Environment,
+  Network,
+  Observable,
+  RecordSource,
+  Store,
+} from 'relay-runtime';
+
+import {Config} from '@/config';
+import {isAsyncIterable, merge, pause} from '@/utils';
+
+let relayEnvironment;
+
+const ErrorMessages = {
+  FAILED_FETCH: 'Failed to fetch',
+  ERROR_FETCH: 'Error in fetch',
+  UNWORKABLE_FETCH: 'Unworkable fetch',
+  SOCKET_CLOSED: 'Socket closed',
+  GRAPHQL_ERRORS: 'GraphQL error',
+};
+
+class NetworkError extends Error {
+  constructor(message, options) {
+    super(message, options);
+
+    this.name = 'NetworkError';
+
+    if (options) {
+      const {cause, ...meta} = options;
+
+      Object.assign(this, meta);
+    }
+  }
+}
+
+const fetchFn = (operation, variables, cacheConfig, uploadables) => {
+  const httpEndpoint = Config.HTTP_ENDPOINT;
+  const authToken = Config.AUTH_TOKEN;
+
+  return Observable.create((sink) => {
+    const init = {
+      method: 'POST',
+      headers: {
+        Accept: 'application/json',
+        Authorization: authToken ? `basic ${authToken}` : undefined,
+      },
+    };
+
+    const {clone, files} = extractFiles(
+      {
+        id: operation.id ?? undefined,
+        query: operation.text ?? undefined,
+        variables,
+      },
+      isExtractableFile,
+    );
+
+    if (files.size) {
+      const form = new FormData();
+
+      form.set('operations', JSON.stringify(clone));
+
+      const map = {};
+      let i = 0;
+
+      files.forEach((paths) => {
+        map[i++] = paths;
+      });
+
+      form.set('map', JSON.stringify(map));
+
+      i = 0;
+      files.forEach((paths, file) => {
+        form.set(`${i++}`, file, file.name);
+      });
+
+      merge(init, {
+        body: form,
+      });
+    } else {
+      merge(init, {
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify(clone),
+      });
+    }
+
+    (async () => {
+      const request = new Request(httpEndpoint, init);
+
+      try {
+        const response = await fetch(request);
+
+        // Status code in range 200-299 inclusive (2xx).
+        if (response.ok) {
+          try {
+            const parts = await meros(response);
+
+            if (isAsyncIterable(parts)) {
+              for await (const part of parts) {
+                if (!part.json) {
+                  sink.error(
+                    new NetworkError(ErrorMessages.UNWORKABLE_FETCH, {
+                      request,
+                      response,
+                    }),
+                  );
+                  break;
+                }
+
+                // If any exceptions occurred when processing the request,
+                // throw an error to indicate to the developer what went wrong.
+                if (Array.isArray(part.body.errors)) {
+                  sink.error(
+                    new NetworkError(ErrorMessages.GRAPHQL_ERRORS, {
+                      request,
+                      response,
+                    }),
+                  );
+                  break;
+                }
+
+                // DEMO: delay chunked responses
+                // await pause(2_000);
+
+                // HACK: if `label` is present, also `path` is required, remove once fixed in HC
+                // @see https://github.com/maraisr/meros/issues/15#issuecomment-1054268416
+                if (part.body.label && !part.body.path) {
+                  part.body.path = [];
+                }
+
+                sink.next(part.body);
+              }
+            } else {
+              const json = await response.json();
+
+              // If any exceptions occurred when processing the request,
+              // throw an error to indicate to the developer what went wrong.
+              if (Array.isArray(json.errors)) {
+                sink.error(
+                  new NetworkError(ErrorMessages.GRAPHQL_ERRORS, {
+                    request,
+                    response,
+                  }),
+                );
+              } else {
+                // DEMO: delay response
+                // await pause(2_000);
+
+                sink.next(json);
+              }
+            }
+
+            sink.complete();
+          } catch (err) {
+            sink.error(
+              new NetworkError(ErrorMessages.UNWORKABLE_FETCH, {
+                cause: err,
+                request,
+                response,
+              }),
+              true,
+            );
+          }
+        } else {
+          sink.error(
+            new NetworkError(ErrorMessages.ERROR_FETCH, {request, response}),
+          );
+        }
+      } catch (err) {
+        sink.error(
+          new NetworkError(ErrorMessages.FAILED_FETCH, {cause: err, request}),
+          true,
+        );
+      }
+    })();
+  });
+};
+
+let wsClient;
+
+/**
+ * With `graphql-ws`.
+ * @see https://github.com/enisdenjo/graphql-ws
+ */
+const subscribeFn = (operation, variables) => {
+  const wsEndpoint = Config.WS_ENDPOINT;
+  const authToken = Config.AUTH_TOKEN;
+
+  const client = (wsClient ??= createClient({
+    url: wsEndpoint,
+    connectionParams: {
+      Authorization: authToken ? `basic ${authToken}` : undefined,
+    },
+  }));
+
+  return Observable.create((sink) =>
+    client.subscribe(
+      {
+        id: operation.id ?? undefined,
+        query: operation.text,
+        variables,
+      },
+      {
+        ...sink,
+        error: (err) => {
+          if (Array.isArray(err)) {
+            return sink.error(
+              new NetworkError(ErrorMessages.ERROR_FETCH, {cause: err}),
+            );
+          }
+
+          if (err instanceof CloseEvent) {
+            return sink.error(
+              new NetworkError(ErrorMessages.SOCKET_CLOSED, {cause: err}),
+            );
+          }
+
+          return sink.error(err, true);
+        },
+      },
+    ),
+  );
+};
+
+const createEnvironment = (initialRecords) => {
+  const source = new RecordSource(initialRecords);
+
+  /**
+   * Presence of Data
+   * @see https://relay.dev/docs/guided-tour/reusing-cached-data/presence-of-data/
+   *
+   * - Note that having a buffer size of 0 is equivalent to not having the release buffer, which means that queries will be immediately released and collected.
+   * - By default, environments have a release buffer size of 10.
+   *
+   * @example
+   * // last 10 queries
+   * gcReleaseBufferSize: 10,
+   *
+   *
+   * Staleness of Data
+   * @see https://relay.dev/docs/guided-tour/reusing-cached-data/staleness-of-data/
+   *
+   * - If the query cache expiration time is not provided, staleness checks only look at whether the referenced records have been invalidated.
+   *
+   * @example
+   * // 1 min
+   * queryCacheExpirationTime: 60 * 1_000,
+   */
+  const options = {};
+
+  const store = new Store(source, options);
+
+  const network = Network.create(fetchFn, subscribeFn);
+
+  return new Environment({
+    network,
+    store,
+  });
+};
+
+export const initEnvironment = (initialRecords) => {
+  // Create a network layer from the fetch function
+  const environment = relayEnvironment ?? createEnvironment(initialRecords);
+
+  // If your page has Next.js data fetching methods that use Relay, the initial records
+  // will get hydrated here
+  if (initialRecords) {
+    environment.getStore().publish(new RecordSource(initialRecords));
+  }
+  // For SSG and SSR always create a new Relay environment
+  if (typeof window === 'undefined') return environment;
+  // Create the Relay environment once in the client
+  if (!relayEnvironment) relayEnvironment = environment;
+
+  return relayEnvironment;
+};
+
+export const useEnvironment = (initialRecords) =>
+  useMemo(() => initEnvironment(initialRecords), [initialRecords]);
diff --git a/crypto/frontend/scenes/dashboard/index.js b/crypto/frontend/scenes/dashboard/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..e20ed54ddf981b8afbf5d19a8cc1365aaf848380
--- /dev/null
+++ b/crypto/frontend/scenes/dashboard/index.js
@@ -0,0 +1 @@
+export {Dummy as Dashboard} from '@/components';
diff --git a/crypto/frontend/pages/dashboard.js b/crypto/frontend/pages/dashboard.js
new file mode 100644
index 0000000000000000000000000000000000000000..f5b3bfcc5a809b3d23c30b8a2d16fc34f5eabf4a
--- /dev/null
+++ b/crypto/frontend/pages/dashboard.js
@@ -0,0 +1 @@
+export {Dashboard as default} from '@/scenes';
diff --git a/crypto/frontend/pages/settings.js b/crypto/frontend/pages/settings.js
new file mode 100644
index 0000000000000000000000000000000000000000..09b0180341866eebce62d54a8c9e5f309e7e2426
--- /dev/null
+++ b/crypto/frontend/pages/settings.js
@@ -0,0 +1 @@
+export {Settings as default} from '@/scenes';
diff --git a/crypto/frontend/scenes/settings/SettingsContainer.js b/crypto/frontend/scenes/settings/SettingsContainer.js
new file mode 100644
index 0000000000000000000000000000000000000000..0aaf8535e57544d4c3a176a64c43248195bce3f7
--- /dev/null
+++ b/crypto/frontend/scenes/settings/SettingsContainer.js
@@ -0,0 +1,33 @@
+import {memo} from 'react';
+import {useState} from 'react';
+import {graphql, useLazyLoadQuery} from 'react-relay';
+
+import SettingsCredentials from './SettingsCredentials';
+import SettingsLinks from './SettingsLinks';
+import SettingsProfile from './SettingsProfile';
+
+export default memo(function SettingsContainer({cacheBuster}) {
+  const data = useLazyLoadQuery(
+    graphql`
+      query SettingsContainerQuery {
+        ...SettingsProfileFragment_query
+      }
+    `,
+    {},
+    {fetchKey: cacheBuster},
+  );
+
+  const [active, setActive] = useState('profile');
+
+  return (
+    <>
+      <SettingsLinks active={active} onChange={setActive} />
+      <SettingsCredentials active={active} onChange={setActive} />
+      <SettingsProfile
+        fragmentRef={data}
+        active={active}
+        onChange={setActive}
+      />
+    </>
+  );
+});
diff --git a/crypto/frontend/scenes/settings/SettingsLinks.js b/crypto/frontend/scenes/settings/SettingsLinks.js
new file mode 100644
index 0000000000000000000000000000000000000000..dddbc6b955a09eb7629f54827e29b853f482e3fa
--- /dev/null
+++ b/crypto/frontend/scenes/settings/SettingsLinks.js
@@ -0,0 +1,76 @@
+import {
+  AccordionActions,
+  AccordionDetails,
+  Button,
+  Stack,
+  TextField,
+} from '@mui/material';
+import {memo, useRef} from 'react';
+
+import {Config, syncWithStorage} from '@/config';
+import {LinksIcon} from '@/icons';
+
+import {Group} from './Group';
+
+export default memo(function SettingsLinks({active, onChange}) {
+  const httpRef = useRef(null);
+  const wsRef = useRef(null);
+
+  return (
+    <Group
+      id="links"
+      icon={LinksIcon}
+      title="Links"
+      active={active}
+      onChange={onChange}
+    >
+      <form
+        name="links"
+        onSubmit={(e) => {
+          e.preventDefault();
+
+          const http = httpRef.current?.value;
+          const ws = wsRef.current?.value;
+
+          syncWithStorage({
+            HTTP_ENDPOINT: http,
+            WS_ENDPOINT: ws,
+          });
+        }}
+      >
+        <AccordionDetails id="panel-links-content" sx={{p: 6}}>
+          <Stack direction="column" gap={8}>
+            <TextField
+              inputRef={httpRef}
+              label="HTTP Endpoint"
+              defaultValue={Config.HTTP_ENDPOINT}
+              autoComplete="http"
+              helperText="The URL of the server to send GraphQL queries over HTTP."
+              required
+              fullWidth
+            />
+            <TextField
+              inputRef={wsRef}
+              label="WS Endpoint"
+              defaultValue={Config.WS_ENDPOINT}
+              autoComplete="ws"
+              helperText="The URL of the server to send GraphQL queries over WebSocket."
+              required
+              fullWidth
+            />
+          </Stack>
+        </AccordionDetails>
+        <AccordionActions
+          sx={{flexDirection: 'row-reverse', justifyContent: 'flex-start'}}
+        >
+          <Button type="submit" color="primary">
+            Save
+          </Button>
+          <Button type="reset" color="secondary">
+            Cancel
+          </Button>
+        </AccordionActions>
+      </form>
+    </Group>
+  );
+});
diff --git a/crypto/frontend/scenes/settings/Group.js b/crypto/frontend/scenes/settings/Group.js
new file mode 100644
index 0000000000000000000000000000000000000000..e083eb6997c21d97d563bd374c8e00293506cc6c
--- /dev/null
+++ b/crypto/frontend/scenes/settings/Group.js
@@ -0,0 +1,35 @@
+import {Accordion, AccordionSummary, Stack, Typography} from '@mui/material';
+
+import {ExpandLockedIcon, ExpandMoreIcon} from '@/icons';
+
+export const Group = ({
+  id,
+  icon: Icon,
+  title,
+  active,
+  disabled,
+  children,
+  onChange,
+}) => (
+  <Accordion
+    expanded={id === active}
+    disabled={disabled}
+    onChange={(event, expanded) => {
+      onChange(expanded ? id : false);
+    }}
+  >
+    <AccordionSummary
+      id={`panel-${id}-header`}
+      expandIcon={disabled ? <ExpandLockedIcon /> : <ExpandMoreIcon />}
+      aria-controls={`panel-${id}-content`}
+    >
+      <Stack direction="row" alignItems="center" gap={2}>
+        <Icon color="action" />
+        <Typography id={id} variant="h3">
+          {title}
+        </Typography>
+      </Stack>
+    </AccordionSummary>
+    {children}
+  </Accordion>
+);
diff --git a/crypto/frontend/scenes/settings/SettingsProfile.js b/crypto/frontend/scenes/settings/SettingsProfile.js
new file mode 100644
index 0000000000000000000000000000000000000000..8bb53a87c94978b5e7285eee838b04e6c5c13ec7
--- /dev/null
+++ b/crypto/frontend/scenes/settings/SettingsProfile.js
@@ -0,0 +1,199 @@
+import {
+  AccordionActions,
+  AccordionDetails,
+  Avatar,
+  Button,
+  IconButton,
+  Stack,
+  TextField,
+} from '@mui/material';
+import {memo, useCallback, useEffect, useRef, useState} from 'react';
+import {useDropzone} from 'react-dropzone';
+import {graphql, useFragment, useMutation} from 'react-relay';
+
+import {DeleteIcon, FileUploadIcon, ProfileIcon} from '@/icons';
+
+import {Group} from './Group';
+
+const useUpdateUserProfile = () => {
+  const [commit, isInFlight] = useMutation(graphql`
+    mutation SettingsProfileUUPMutation($input: UpdateUserProfileInput!) {
+      updateUserProfile(input: $input) {
+        updatedUser {
+          displayName
+          imageUrl
+        }
+      }
+    }
+  `);
+
+  const execute = useCallback(
+    ({id, displayName, image, previewUrl}) => {
+      commit({
+        variables: {
+          input: Object.assign({displayName}, image !== undefined && {image}),
+        },
+        optimisticUpdater(store) {
+          const record = store.get(id);
+
+          record.setValue(displayName, 'displayName');
+
+          if (previewUrl !== undefined) {
+            record.setValue(previewUrl, 'imageUrl');
+          }
+        },
+        onCompleted() {
+          console.log('profile was updated');
+        },
+        onError() {
+          console.log('there was a problem while updating the profile');
+        },
+      });
+    },
+    [commit],
+  );
+
+  return [execute, isInFlight];
+};
+
+export default memo(function SettingsProfile({active, onChange, fragmentRef}) {
+  const data = useFragment(
+    graphql`
+      fragment SettingsProfileFragment_query on Query {
+        me {
+          id
+          name
+          displayName
+          imageUrl
+        }
+      }
+    `,
+    fragmentRef,
+  );
+  const me = data.me;
+
+  const [updateUserProfile] = useUpdateUserProfile();
+
+  const [[image, previewUrl], setAvatar] = useState([]);
+
+  const {getRootProps, getInputProps, open} = useDropzone({
+    accept: 'image/*',
+    multiple: false,
+    maxFiles: 1,
+    maxSize: 1_024_000,
+    onDropAccepted: ([file]) => {
+      console.log('image drop accepted');
+
+      setAvatar([file, URL.createObjectURL(file)]);
+    },
+    onDropRejected: (fileRejections) => {
+      console.log('image drop rejected', fileRejections);
+    },
+  });
+
+  const displaynameRef = useRef(null);
+
+  useEffect(() => {
+    if (previewUrl) {
+      return () => {
+        URL.revokeObjectURL(previewUrl);
+      };
+    }
+  }, [previewUrl]);
+
+  return (
+    <Group
+      id="profile"
+      icon={ProfileIcon}
+      title="Profile"
+      active={active}
+      disabled={!me}
+      onChange={onChange}
+    >
+      {me && (
+        <form
+          name="links"
+          onSubmit={(e) => {
+            e.preventDefault();
+
+            const displayName = displaynameRef.current?.value || null;
+
+            updateUserProfile({
+              id: me.id,
+              displayName,
+              image,
+              previewUrl,
+            });
+          }}
+        >
+          <AccordionDetails id="panel-profile-content" sx={{p: 6}}>
+            <Stack direction="column" alignItems="center" gap={8}>
+              <input {...getInputProps()} />
+              <Avatar
+                src={previewUrl === undefined ? me.imageUrl : previewUrl}
+                sx={(theme) => ({
+                  width: 192,
+                  height: 192,
+                  border: `1px solid ${theme.palette.action.focus}`,
+                  backgroundColor: theme.palette.action.focus,
+                  outline: 0,
+                  '&:hover': {
+                    borderColor: theme.palette.text.primary,
+                  },
+                  '&:focus': {
+                    borderWidth: 2,
+                    borderColor: theme.palette.primary.main,
+                  },
+                })}
+                {...getRootProps()}
+              />
+              <Stack direction="row">
+                <IconButton
+                  size="medium"
+                  aria-label="remove image"
+                  disabled={!previewUrl && !me.imageUrl}
+                  onClick={() => {
+                    setAvatar([null, null]);
+                  }}
+                >
+                  <DeleteIcon fontSize="inherit" />
+                </IconButton>
+                <IconButton
+                  size="medium"
+                  aria-label="upload image"
+                  onClick={open}
+                >
+                  <FileUploadIcon fontSize="inherit" />
+                </IconButton>
+              </Stack>
+              <TextField
+                inputRef={displaynameRef}
+                label="Displayname"
+                defaultValue={me.displayName}
+                autoComplete="displayname"
+                helperText="Your name may appear around where you contribute or are mentioned. You can remove it at any time."
+                fullWidth
+              />
+            </Stack>
+          </AccordionDetails>
+          <AccordionActions
+            sx={{flexDirection: 'row-reverse', justifyContent: 'flex-start'}}
+          >
+            <Button type="submit" color="primary">
+              Save
+            </Button>
+            <Button
+              type="reset"
+              color="secondary"
+              onClick={() => {
+                setAvatar([]);
+              }}
+            >
+              Cancel
+            </Button>
+          </AccordionActions>
+        </form>
+      )}
+    </Group>
+  );
+});
diff --git a/crypto/frontend/scenes/settings/index.js b/crypto/frontend/scenes/settings/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..decad83e3475289c4703057a581da1dbc0656752
--- /dev/null
+++ b/crypto/frontend/scenes/settings/index.js
@@ -0,0 +1,15 @@
+import {Suspense} from 'react';
+
+import {ActivityIndicator, ErrorBoundaryWithRetry} from '@/components';
+
+import SettingsContainer from './SettingsContainer';
+
+export const Settings = ({symbol}) => (
+  <ErrorBoundaryWithRetry key={symbol}>
+    {({cacheBuster}) => (
+      <Suspense fallback={<ActivityIndicator />}>
+        <SettingsContainer cacheBuster={cacheBuster} />
+      </Suspense>
+    )}
+  </ErrorBoundaryWithRetry>
+);
