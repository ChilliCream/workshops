diff --git a/crypto/frontend/scenes/dashboard/DashboardTicker.js b/crypto/frontend/scenes/dashboard/DashboardTicker.js
new file mode 100644
index 0000000000000000000000000000000000000000..e65e674fee773ebcb90c7314b104fdaca7bf3527
--- /dev/null
+++ b/crypto/frontend/scenes/dashboard/DashboardTicker.js
@@ -0,0 +1,52 @@
+import {memo, useMemo} from 'react';
+import {graphql, useFragment, useSubscription} from 'react-relay';
+
+import {Ticker} from '@/components';
+
+import DashboardTickerItem from './DashboardTickerItem';
+
+export default memo(function DashboardTicker({fragmentRef}) {
+  const data = useFragment(
+    graphql`
+      fragment DashboardTickerFragment_query on Query {
+        ticker: assets(
+          first: 10
+          order: {price: {tradableMarketCapRank: ASC}}
+        ) {
+          nodes {
+            symbol
+            ...DashboardTickerItemFragment_asset
+          }
+        }
+      }
+    `,
+    fragmentRef,
+  );
+  const assets = data.ticker?.nodes;
+
+  useSubscription(
+    useMemo(
+      () => ({
+        subscription: graphql`
+          subscription DashboardTickerSubscription($symbols: [String!]!) {
+            onPriceChange(symbols: $symbols) {
+              currency
+              lastPrice
+              change24Hour
+            }
+          }
+        `,
+        variables: {symbols: assets?.map(({symbol}) => symbol) ?? []},
+      }),
+      [assets],
+    ),
+  );
+
+  return (
+    <Ticker>
+      {assets?.map((asset) => (
+        <DashboardTickerItem key={asset.symbol} fragmentRef={asset} />
+      ))}
+    </Ticker>
+  );
+});
diff --git a/crypto/frontend/scenes/notifications/index.js b/crypto/frontend/scenes/notifications/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..810a22fd6b19a25c7c7bb12238e114e40df6c4b0
--- /dev/null
+++ b/crypto/frontend/scenes/notifications/index.js
@@ -0,0 +1,26 @@
+import {Suspense} from 'react';
+
+import {ActivityIndicator, Drawer, ErrorBoundaryWithRetry} from '@/components';
+import {useNotifications} from '@/hooks';
+
+import NotificationsContainer from './NotificationsContainer';
+import NotificationsManager from './NotificationsManager';
+
+export const Notifications = () => {
+  const {active, show, hide} = useNotifications();
+
+  return (
+    <>
+      <NotificationsManager onClick={show} />
+      <Drawer open={active} onClose={hide}>
+        <ErrorBoundaryWithRetry>
+          {({cacheBuster}) => (
+            <Suspense fallback={<ActivityIndicator />}>
+              <NotificationsContainer cacheBuster={cacheBuster} />
+            </Suspense>
+          )}
+        </ErrorBoundaryWithRetry>
+      </Drawer>
+    </>
+  );
+};
diff --git a/crypto/frontend/scenes/dashboard/DashboardSpotlightCard.js b/crypto/frontend/scenes/dashboard/DashboardSpotlightCard.js
new file mode 100644
index 0000000000000000000000000000000000000000..11655100122c3685ffa93165171463dd6659affc
--- /dev/null
+++ b/crypto/frontend/scenes/dashboard/DashboardSpotlightCard.js
@@ -0,0 +1,74 @@
+import {
+  Card,
+  CardContent,
+  CardHeader,
+  IconButton,
+  Table,
+  TableBody,
+} from '@mui/material';
+import {useState} from 'react';
+import {graphql, useFragment} from 'react-relay';
+
+import {NoData} from '@/components';
+import {SwapIcon} from '@/icons';
+
+import DashboardSpotlightItem from './DashboardSpotlightItem';
+
+const Views = {
+  CHANGE: 'change',
+  PRICE: 'price',
+};
+
+export default function DashboardSpotlightCard({fragmentRef, avatar, title}) {
+  const data = useFragment(
+    graphql`
+      fragment DashboardSpotlightCardFragment_asset on AssetsConnection {
+        nodes {
+          id
+          ...DashboardSpotlightItemFragment_asset
+        }
+      }
+    `,
+    fragmentRef,
+  );
+  const assets = data?.nodes;
+
+  const [view, setView] = useState(Views.CHANGE);
+
+  return (
+    <Card elevation={0} sx={{minWidth: 250}}>
+      <CardHeader
+        sx={{p: 2}}
+        avatar={avatar}
+        title={title}
+        action={
+          <IconButton
+            aria-label={view}
+            onClick={() => {
+              setView(view === Views.CHANGE ? Views.PRICE : Views.CHANGE);
+            }}
+          >
+            <SwapIcon />
+          </IconButton>
+        }
+      />
+      <CardContent sx={{'&:last-child': {pt: 0, pb: 2, px: 4}}}>
+        {assets?.length ? (
+          <Table size="medium">
+            <TableBody>
+              {assets.map((node) => (
+                <DashboardSpotlightItem
+                  key={node.id}
+                  fragmentRef={node}
+                  view={view}
+                />
+              ))}
+            </TableBody>
+          </Table>
+        ) : (
+          <NoData />
+        )}
+      </CardContent>
+    </Card>
+  );
+}
diff --git a/crypto/frontend/scenes/viewer/ViewerHeader.js b/crypto/frontend/scenes/viewer/ViewerHeader.js
new file mode 100644
index 0000000000000000000000000000000000000000..88bd3b83c95951ecc372c039d7718dde421d4760
--- /dev/null
+++ b/crypto/frontend/scenes/viewer/ViewerHeader.js
@@ -0,0 +1,167 @@
+import {Checkbox, Chip, Stack, Typography} from '@mui/material';
+import {memo, useCallback} from 'react';
+import {graphql, useFragment, useMutation} from 'react-relay';
+
+import {useAlerts} from '@/hooks';
+import {
+  AlertActiveIcon,
+  AlertIcon,
+  CryptoIcon,
+  WatchIcon,
+  WatchedIcon,
+} from '@/icons';
+
+const useAddToWatchlist = () => {
+  const [commit, isInFlight] = useMutation(graphql`
+    mutation ViewerHeaderAATWMutation($input: AddAssetToWatchlistInput!) {
+      addAssetToWatchlist(input: $input) {
+        watchlist {
+          assets {
+            nodes {
+              isInWatchlist
+            }
+          }
+        }
+      }
+    }
+  `);
+
+  const execute = useCallback(
+    ({id, symbol}) => {
+      commit({
+        variables: {input: {symbol}},
+        optimisticUpdater(store) {
+          const record = store.get(id);
+
+          record.setValue(true, 'isInWatchlist');
+        },
+        onCompleted() {
+          console.log(`${symbol} was added to the watchlist`);
+        },
+        onError() {
+          console.log(
+            `there was a problem with ${symbol} while adding to the watchlist`,
+          );
+        },
+      });
+    },
+    [commit],
+  );
+
+  return [execute, isInFlight];
+};
+
+const useRemoveFromWatchlist = () => {
+  const [commit, isInFlight] = useMutation(graphql`
+    mutation ViewerHeaderRAFWMutation($input: RemoveAssetFromWatchlistInput!) {
+      removeAssetFromWatchlist(input: $input) {
+        removedAsset {
+          isInWatchlist
+        }
+      }
+    }
+  `);
+
+  const execute = useCallback(
+    ({id, symbol}) => {
+      commit({
+        variables: {input: {symbol}},
+        optimisticUpdater: (store) => {
+          const record = store.get(id);
+
+          record.setValue(false, 'isInWatchlist');
+        },
+        onCompleted: () => {
+          console.log(`${symbol} was removed from the watchlist`);
+        },
+        onError: () => {
+          console.log(
+            `there was a problem with ${symbol} while removing from the watchlist`,
+          );
+        },
+      });
+    },
+    [commit],
+  );
+
+  return [execute, isInFlight];
+};
+
+export default memo(function ViewerHeader({fragmentRef}) {
+  const asset = useFragment(
+    graphql`
+      fragment ViewerHeaderFragment_asset on Asset {
+        id
+        symbol
+        name
+        imageUrl
+        isInWatchlist
+        hasAlerts
+      }
+    `,
+    fragmentRef,
+  );
+
+  const [addToWatchlist] = useAddToWatchlist();
+  const [removeFromWatchlist] = useRemoveFromWatchlist();
+
+  const {active, show} = useAlerts();
+
+  return (
+    <Stack direction="row" alignItems="center" gap={2} mb={4}>
+      <Stack
+        direction="row"
+        alignItems="center"
+        gap={2}
+        marginLeft={2}
+        marginRight="auto"
+      >
+        <CryptoIcon src={asset.imageUrl} alt={asset.name} size="large" />
+        <Typography variant="h2" fontWeight={600}>
+          {asset.name}
+        </Typography>
+        <Chip
+          label={asset.symbol}
+          size="small"
+          sx={(theme) => ({
+            borderRadius: theme.spacing(2),
+          })}
+        />
+      </Stack>
+      <Stack direction="row">
+        <Checkbox
+          color="primary"
+          icon={<AlertIcon />}
+          checkedIcon={asset.hasAlerts ? <AlertActiveIcon /> : <AlertIcon />}
+          checked={asset.hasAlerts || active}
+          disabled={asset.isInWatchlist === null}
+          inputProps={{
+            'aria-label': 'alert',
+          }}
+          onChange={(event) => {
+            event.preventDefault();
+
+            show();
+          }}
+        />
+        <Checkbox
+          color="primary"
+          icon={<WatchIcon />}
+          checkedIcon={<WatchedIcon />}
+          checked={!!asset.isInWatchlist}
+          disabled={asset.isInWatchlist === null}
+          inputProps={{
+            'aria-label': 'watch',
+          }}
+          onChange={(event) => {
+            if (event.target.checked) {
+              addToWatchlist(asset);
+            } else {
+              removeFromWatchlist(asset);
+            }
+          }}
+        />
+      </Stack>
+    </Stack>
+  );
+});
diff --git a/crypto/frontend/scenes/notifications/NotificationsList.js b/crypto/frontend/scenes/notifications/NotificationsList.js
new file mode 100644
index 0000000000000000000000000000000000000000..3fe4e8e9e2c4aebdbc78504af7215017a468097a
--- /dev/null
+++ b/crypto/frontend/scenes/notifications/NotificationsList.js
@@ -0,0 +1,129 @@
+import {Button, List, Stack} from '@mui/material';
+import {memo, useCallback} from 'react';
+import {
+  ConnectionHandler,
+  graphql,
+  useMutation,
+  usePaginationFragment,
+} from 'react-relay';
+
+import {LoadMoreButton, NoData} from '@/components';
+import {ReadIcon} from '@/icons';
+
+import NotificationsListItem from './NotificationsListItem';
+
+const useMarkNotificationsRead = () => {
+  const [commit, isInFlight] = useMutation(graphql`
+    mutation NotificationsListMNRMutation($input: MarkNotificationsReadInput!) {
+      markNotificationsRead(input: $input) {
+        readNotifications {
+          read
+        }
+      }
+    }
+  `);
+
+  const execute = useCallback(
+    ({ids}) => {
+      const updater = (store) => {
+        const me = store.getRoot().getLinkedRecord('me');
+
+        if (me) {
+          const notifications = ConnectionHandler.getConnection(
+            me,
+            'NotificationsList_notifications',
+            {status: 'UNREAD'},
+          );
+
+          if (notifications) {
+            ids.forEach((id) => {
+              ConnectionHandler.deleteNode(notifications, id);
+            });
+          }
+        }
+      };
+
+      commit({
+        variables: {input: {notificationIds: ids}},
+        optimisticUpdater: updater,
+        updater,
+        onCompleted: () => {
+          console.log(`notifications were marked as read`);
+        },
+        onError: () => {
+          console.log(
+            `there was a problem while marking the notifications as read`,
+          );
+        },
+      });
+    },
+    [commit],
+  );
+
+  return [execute, isInFlight];
+};
+
+export default memo(function NotificationsList({fragmentRef}) {
+  const {data, hasNext, loadNext, isLoadingNext} = usePaginationFragment(
+    graphql`
+      fragment NotificationsListFragment_query on Query
+      @argumentDefinitions(
+        cursor: {type: "String"}
+        count: {type: "Int", defaultValue: 10}
+      )
+      @refetchable(queryName: "NotificationsListRefetchableQuery") {
+        me {
+          notifications(after: $cursor, first: $count, status: UNREAD)
+            @connection(key: "NotificationsList_notifications") {
+            edges {
+              node {
+                id
+                read
+                ...NotificationsListItemFragment_notification
+              }
+            }
+          }
+        }
+      }
+    `,
+    fragmentRef,
+  );
+  const notifications = data.me?.notifications?.edges;
+
+  const [markNotifications] = useMarkNotificationsRead();
+
+  const handleRead = () => {
+    markNotifications({ids: notifications.map(({node}) => node.id)});
+  };
+
+  return (
+    <Stack py={2} px={4}>
+      {notifications?.length || hasNext ? (
+        <>
+          <Stack direction="row" justifyContent="end" pr={2}>
+            <Button
+              variant="text"
+              size="small"
+              endIcon={<ReadIcon />}
+              onClick={handleRead}
+            >
+              read all
+            </Button>
+          </Stack>
+          <List>
+            {notifications.map(({node}) => (
+              <NotificationsListItem key={node.id} fragmentRef={node} />
+            ))}
+          </List>
+          {hasNext && (
+            <Stack alignItems="center">
+              <LoadMoreButton busy={isLoadingNext} onClick={loadNext} />
+            </Stack>
+          )}
+        </>
+      ) : (
+        <NoData message="You're all caught up." />
+      )}
+    </Stack>
+  );
+});
diff --git a/crypto/frontend/scenes/settings/SettingsCredentials.js b/crypto/frontend/scenes/settings/SettingsCredentials.js
new file mode 100644
index 0000000000000000000000000000000000000000..e513581d7c84842de5a2bcdb6d8428b3343ee5f0
--- /dev/null
+++ b/crypto/frontend/scenes/settings/SettingsCredentials.js
@@ -0,0 +1,78 @@
+import {
+  AccordionActions,
+  AccordionDetails,
+  Button,
+  Stack,
+  TextField,
+} from '@mui/material';
+import {memo, useRef} from 'react';
+
+import {PasswordField} from '@/components';
+import {Config, syncWithStorage} from '@/config';
+import {CredentialsIcon} from '@/icons';
+
+import {Group} from './Group';
+
+export default memo(function SettingsCredentials({active, onChange}) {
+  const usernameRef = useRef(null);
+  const passwordRef = useRef(null);
+
+  return (
+    <Group
+      id="credentials"
+      icon={CredentialsIcon}
+      title="Credentials"
+      active={active}
+      onChange={onChange}
+    >
+      <form
+        name="credentials"
+        onSubmit={(e) => {
+          e.preventDefault();
+
+          const username = usernameRef.current?.value?.trim();
+          const password = passwordRef.current?.value?.trim();
+          const token =
+            username && password
+              ? Buffer.from(`${username}:${password}`).toString('base64')
+              : null;
+
+          syncWithStorage({
+            USERNAME: username,
+            PASSWORD: password,
+            AUTH_TOKEN: token,
+          });
+        }}
+      >
+        <AccordionDetails id="panel-credentials-content" sx={{p: 6}}>
+          <Stack direction="column" gap={8}>
+            <TextField
+              inputRef={usernameRef}
+              label="Username"
+              defaultValue={Config.USERNAME}
+              autoComplete="username"
+              fullWidth
+            />
+            <PasswordField
+              inputRef={passwordRef}
+              label="Password"
+              defaultValue={Config.PASSWORD}
+              autoComplete="current-password"
+              fullWidth
+            />
+          </Stack>
+        </AccordionDetails>
+        <AccordionActions
+          sx={{flexDirection: 'row-reverse', justifyContent: 'flex-start'}}
+        >
+          <Button type="submit" color="primary">
+            Save
+          </Button>
+          <Button type="reset" color="secondary">
+            Cancel
+          </Button>
+        </AccordionActions>
+      </form>
+    </Group>
+  );
+});
diff --git a/crypto/frontend/scenes/dashboard/index.js b/crypto/frontend/scenes/dashboard/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..312b9c8e79235017f7e38340d94ce7d54a77e940
--- /dev/null
+++ b/crypto/frontend/scenes/dashboard/index.js
@@ -0,0 +1,15 @@
+import {Suspense} from 'react';
+
+import {ActivityIndicator, ErrorBoundaryWithRetry} from '@/components';
+
+import DashboardContainer from './DashboardContainer';
+
+export const Dashboard = () => (
+  <ErrorBoundaryWithRetry>
+    {({cacheBuster}) => (
+      <Suspense fallback={<ActivityIndicator />}>
+        <DashboardContainer cacheBuster={cacheBuster} />
+      </Suspense>
+    )}
+  </ErrorBoundaryWithRetry>
+);
diff --git a/crypto/frontend/scenes/alerts/AlertsActions.js b/crypto/frontend/scenes/alerts/AlertsActions.js
new file mode 100644
index 0000000000000000000000000000000000000000..99c70d0101beb72ce95b4ca3d5c2cd3472ded904
--- /dev/null
+++ b/crypto/frontend/scenes/alerts/AlertsActions.js
@@ -0,0 +1,255 @@
+import {
+  Box,
+  Checkbox,
+  FormControlLabel,
+  IconButton,
+  Stack,
+  Table,
+  TableBody,
+  TableCell,
+  TableRow,
+  TextField,
+} from '@mui/material';
+import {useCallback, useState} from 'react';
+import {graphql, useFragment, useMutation} from 'react-relay';
+
+import {BusyButton, NoData, PercentageSlider} from '@/components';
+import {CancelIcon} from '@/icons';
+import {formatCurrency, inequality, round} from '@/utils';
+
+const useCreateAlert = () => {
+  const [commit, isInFlight] = useMutation(graphql`
+    mutation AlertsActionsCAMutation($input: CreateAlertInput!) {
+      createAlert(input: $input) {
+        createdAlert {
+          asset {
+            hasAlerts
+            alerts {
+              nodes {
+                id
+                currency
+                targetPrice
+                percentageChange
+                recurring
+              }
+            }
+          }
+        }
+      }
+    }
+  `);
+
+  const execute = useCallback(
+    ({symbol, currency, targetPrice, recurring}) => {
+      commit({
+        variables: {input: {symbol, currency, targetPrice, recurring}},
+        onCompleted() {
+          console.log(`alert created for ${symbol}`);
+        },
+        onError() {
+          console.log(
+            `there was a problem while creating an alert for ${symbol}`,
+          );
+        },
+      });
+    },
+    [commit],
+  );
+
+  return [execute, isInFlight];
+};
+
+export const AddAlert = ({fragmentRef, symbol}) => {
+  const asset = useFragment(
+    graphql`
+      fragment AlertsActionsAAFragment_asset on Asset {
+        price {
+          currency
+          lastPrice
+        }
+      }
+    `,
+    fragmentRef,
+  );
+  const {currency, lastPrice} = asset.price;
+
+  const [createAlert, isInFlight] = useCreateAlert();
+
+  const [state, setState] = useState(() => ({
+    symbol,
+    currency,
+    targetPrice: lastPrice,
+    percentage: 0,
+    recurring: false,
+  }));
+
+  const handleChange = useCallback((e) => {
+    const {name, value, checked} = e.target;
+
+    switch (name) {
+      case 'percentage':
+        setState((prev) => ({
+          ...prev,
+          percentage: value,
+          targetPrice:
+            value === 0 ? lastPrice : round(lastPrice * (1 + value / 100), 2),
+        }));
+        break;
+      case 'price':
+        setState((prev) => ({
+          ...prev,
+          percentage: (Math.max(Number(value), 0) / lastPrice - 1) * 100,
+          targetPrice: Math.max(Number(value), 0),
+        }));
+        break;
+      case 'recurring':
+        setState((prev) => ({...prev, recurring: checked}));
+        break;
+    }
+  }, []);
+
+  return (
+    <form
+      onSubmit={(e) => {
+        e.preventDefault();
+
+        createAlert(state);
+      }}
+    >
+      <Stack gap={6}>
+        <Box sx={{mt: 12, mx: 8}}>
+          <PercentageSlider
+            name="percentage"
+            value={state.percentage}
+            min={-25}
+            max={+25}
+            step={1}
+            onChange={handleChange}
+          />
+        </Box>
+        <TextField
+          type="number"
+          name="price"
+          label="Target price"
+          value={state.targetPrice}
+          autoComplete="off"
+          onChange={handleChange}
+          sx={{width: 150, margin: 'auto'}}
+        />
+        <FormControlLabel
+          label="Recurring"
+          labelPlacement="end"
+          control={
+            <Checkbox
+              name="recurring"
+              checked={state.recurring}
+              onChange={handleChange}
+            />
+          }
+          sx={{margin: 'auto'}}
+        />
+        <Stack direction="row" justifyContent="end">
+          <BusyButton type="submit" color="primary" busy={isInFlight}>
+            save
+          </BusyButton>
+        </Stack>
+      </Stack>
+    </form>
+  );
+};
+
+const useDeleteAlert = () => {
+  const [commit, isInFlight] = useMutation(graphql`
+    mutation AlertsActionsDAMutation($input: DeleteAlertInput!) {
+      deleteAlert(input: $input) {
+        deletedAlert {
+          asset {
+            hasAlerts
+            alerts {
+              nodes {
+                id
+                currency
+                targetPrice
+                percentageChange
+                recurring
+              }
+            }
+          }
+        }
+      }
+    }
+  `);
+
+  const execute = useCallback(
+    ({id, symbol}) => {
+      commit({
+        variables: {input: {alertId: id}},
+        onCompleted() {
+          console.log(`alert deleted for ${symbol}`);
+        },
+        onError() {
+          console.log(
+            `there was a problem while deleting an alert for ${symbol}`,
+          );
+        },
+      });
+    },
+    [commit],
+  );
+
+  return [execute, isInFlight];
+};
+
+export const DeleteAlert = ({fragmentRef, symbol}) => {
+  const asset = useFragment(
+    graphql`
+      fragment AlertsActionsDAFragment_asset on Asset {
+        hasAlerts
+        alerts {
+          nodes {
+            id
+            currency
+            targetPrice
+            percentageChange
+            recurring
+          }
+        }
+      }
+    `,
+    fragmentRef,
+  );
+  const alerts = asset.alerts?.nodes;
+
+  const [deleteAlert] = useDeleteAlert();
+
+  return alerts?.length ? (
+    <Table size="medium">
+      <TableBody>
+        {alerts.map((node) => (
+          <TableRow key={node.id} tabIndex={-1} hover>
+            <TableCell>1 {symbol}</TableCell>
+            <TableCell align="center">
+              {inequality(node.percentageChange)}
+            </TableCell>
+            <TableCell align="right" sx={{width: 'auto', fontWeight: 600}}>
+              {formatCurrency(node.targetPrice, {currency: node.currency})}
+            </TableCell>
+            <TableCell align="right" sx={{width: 46, paddingLeft: 0}}>
+              <IconButton
+                size="small"
+                aria-label="remove alert"
+                onClick={() => {
+                  deleteAlert({id: node.id, symbol});
+                }}
+              >
+                <CancelIcon />
+              </IconButton>
+            </TableCell>
+          </TableRow>
+        ))}
+      </TableBody>
+    </Table>
+  ) : (
+    <NoData />
+  );
+};
diff --git a/crypto/frontend/scenes/settings/Group.js b/crypto/frontend/scenes/settings/Group.js
new file mode 100644
index 0000000000000000000000000000000000000000..e083eb6997c21d97d563bd374c8e00293506cc6c
--- /dev/null
+++ b/crypto/frontend/scenes/settings/Group.js
@@ -0,0 +1,35 @@
+import {Accordion, AccordionSummary, Stack, Typography} from '@mui/material';
+
+import {ExpandLockedIcon, ExpandMoreIcon} from '@/icons';
+
+export const Group = ({
+  id,
+  icon: Icon,
+  title,
+  active,
+  disabled,
+  children,
+  onChange,
+}) => (
+  <Accordion
+    expanded={id === active}
+    disabled={disabled}
+    onChange={(event, expanded) => {
+      onChange(expanded ? id : false);
+    }}
+  >
+    <AccordionSummary
+      id={`panel-${id}-header`}
+      expandIcon={disabled ? <ExpandLockedIcon /> : <ExpandMoreIcon />}
+      aria-controls={`panel-${id}-content`}
+    >
+      <Stack direction="row" alignItems="center" gap={2}>
+        <Icon color="action" />
+        <Typography id={id} variant="h3">
+          {title}
+        </Typography>
+      </Stack>
+    </AccordionSummary>
+    {children}
+  </Accordion>
+);
diff --git a/crypto/frontend/pages/_app.js b/crypto/frontend/pages/_app.js
index 8538cf3da3d9b697b1504a3947910a1823bea109..390f7c9918dfb37136c4bf7055216ff91508e879 100644
--- a/crypto/frontend/pages/_app.js
+++ b/crypto/frontend/pages/_app.js
@@ -1,7 +1,9 @@
 import {CacheProvider} from '@emotion/react';
 import {CssBaseline, ThemeProvider} from '@mui/material';
 import {useEffect} from 'react';
+import {RelayEnvironmentProvider} from 'react-relay';
 
+import {useEnvironment} from '@/client';
 import {
   Content,
   Hacks,
@@ -10,6 +12,7 @@ import {
   SlotsProvider,
 } from '@/components';
 import {usePreferredTheme} from '@/hooks';
+import {Notifications} from '@/scenes';
 import {createEmotionCache} from '@/styles';
 
 const clientSideEmotionCache = createEmotionCache();
@@ -19,6 +22,7 @@ export default function MyApp({
   emotionCache = clientSideEmotionCache,
   pageProps,
 }) {
+  const environment = useEnvironment(pageProps.initialRecords);
   const [theme, mode] = usePreferredTheme();
 
   useEffect(() => {
@@ -28,19 +32,22 @@ export default function MyApp({
   }, []);
 
   return (
-    <CacheProvider value={emotionCache}>
-      <ThemeProvider theme={theme}>
-        <ModeProvider value={mode}>
-          <Metadata />
-          <CssBaseline enableColorScheme />
-          <SlotsProvider>
-            <Content>
-              <Component {...pageProps} />
-            </Content>
-          </SlotsProvider>
-          <Hacks />
-        </ModeProvider>
-      </ThemeProvider>
-    </CacheProvider>
+    <RelayEnvironmentProvider environment={environment}>
+      <CacheProvider value={emotionCache}>
+        <ThemeProvider theme={theme}>
+          <ModeProvider value={mode}>
+            <Metadata />
+            <CssBaseline enableColorScheme />
+            <SlotsProvider>
+              <Content variant="crypto">
+                <Notifications />
+                <Component {...pageProps} />
+              </Content>
+            </SlotsProvider>
+            <Hacks />
+          </ModeProvider>
+        </ThemeProvider>
+      </CacheProvider>
+    </RelayEnvironmentProvider>
   );
 }
diff --git a/crypto/frontend/pages/watchlist.js b/crypto/frontend/pages/watchlist.js
new file mode 100644
index 0000000000000000000000000000000000000000..e032c232a663a710205bfa6e166fb61a9d55572d
--- /dev/null
+++ b/crypto/frontend/pages/watchlist.js
@@ -0,0 +1 @@
+export {Watchlist as default} from '@/scenes';
diff --git a/crypto/frontend/scenes/notifications/NotificationsListItem.js b/crypto/frontend/scenes/notifications/NotificationsListItem.js
new file mode 100644
index 0000000000000000000000000000000000000000..dfbf49a8e4483656b74538a60597767c21f002b3
--- /dev/null
+++ b/crypto/frontend/scenes/notifications/NotificationsListItem.js
@@ -0,0 +1,127 @@
+import {
+  Checkbox,
+  Link,
+  ListItem,
+  ListItemAvatar,
+  ListItemButton,
+  ListItemText,
+} from '@mui/material';
+import NextLink from 'next/link';
+import {memo, useCallback} from 'react';
+import {
+  ConnectionHandler,
+  graphql,
+  useFragment,
+  useMutation,
+} from 'react-relay';
+
+import {CryptoIcon, UnreadIcon} from '@/icons';
+
+const useMarkNotificationRead = () => {
+  const [commit, isInFlight] = useMutation(graphql`
+    mutation NotificationsListItemMNRMutation(
+      $input: MarkNotificationReadInput!
+    ) {
+      markNotificationRead(input: $input) {
+        readNotification {
+          read
+        }
+      }
+    }
+  `);
+
+  const execute = useCallback(
+    ({id}) => {
+      const updater = (store) => {
+        const me = store.getRoot().getLinkedRecord('me');
+
+        if (me) {
+          const notifications = ConnectionHandler.getConnection(
+            me,
+            'NotificationsList_notifications',
+            {status: 'UNREAD'},
+          );
+
+          if (notifications) {
+            ConnectionHandler.deleteNode(notifications, id);
+          }
+        }
+      };
+
+      commit({
+        variables: {input: {notificationId: id}},
+        optimisticUpdater: updater,
+        updater,
+        onCompleted: () => {
+          console.log(`notification was marked as read`);
+        },
+        onError: () => {
+          console.log(
+            `there was a problem while marking the notification as read`,
+          );
+        },
+      });
+    },
+    [commit],
+  );
+
+  return [execute, isInFlight];
+};
+
+export default memo(function NotificationsListItem({fragmentRef}) {
+  const notification = useFragment(
+    graphql`
+      fragment NotificationsListItemFragment_notification on Notification {
+        id
+        message
+        read
+        asset {
+          symbol
+          name
+          imageUrl
+          price {
+            currency
+            lastPrice
+          }
+        }
+      }
+    `,
+    fragmentRef,
+  );
+  const asset = notification.asset;
+
+  const [markNotification] = useMarkNotificationRead();
+
+  const labelId = `notification-${notification.id}`;
+  const handleRead = () => {
+    markNotification({id: notification.id});
+  };
+
+  return (
+    <ListItem
+      secondaryAction={
+        <Checkbox
+          edge="end"
+          checked={true}
+          checkedIcon={<UnreadIcon fontSize="inherit" />}
+          inputProps={{'aria-labelledby': labelId}}
+          onChange={handleRead}
+        />
+      }
+      disablePadding
+    >
+      <NextLink
+        href="/currencies/[symbol]"
+        as={`/currencies/${asset.symbol}`}
+        passHref
+      >
+        <ListItemButton component={Link} onClick={handleRead}>
+          <ListItemAvatar>
+            <CryptoIcon src={asset.imageUrl} alt={asset.name} size="medium" />
+          </ListItemAvatar>
+          <ListItemText id={labelId} primary={notification.message} />
+        </ListItemButton>
+      </NextLink>
+    </ListItem>
+  );
+});
diff --git a/crypto/frontend/scenes/dashboard/DashboardContainer.js b/crypto/frontend/scenes/dashboard/DashboardContainer.js
new file mode 100644
index 0000000000000000000000000000000000000000..6bfe25be57a2e8ad5b6a6f7e971cee48b8e4233c
--- /dev/null
+++ b/crypto/frontend/scenes/dashboard/DashboardContainer.js
@@ -0,0 +1,36 @@
+import {Divider, Stack} from '@mui/material';
+import ErrorPage from 'next/error';
+import {memo} from 'react';
+import {graphql, useLazyLoadQuery} from 'react-relay';
+
+import DashboardFeatured from './DashboardFeatured';
+import DashboardSpotlight from './DashboardSpotlight';
+import DashboardTicker from './DashboardTicker';
+
+export default memo(function DashboardContainer({cacheBuster}) {
+  const data = useLazyLoadQuery(
+    graphql`
+      query DashboardContainerQuery {
+        ...DashboardTickerFragment_query
+        ...DashboardFeaturedFragment_query
+        ...DashboardSpotlightFragment_query @defer(label: "spotlight")
+      }
+    `,
+    {},
+    {fetchKey: cacheBuster},
+  );
+
+  if (!data) {
+    return <ErrorPage statusCode={404} title="Out of service" />;
+  }
+
+  return (
+    <Stack gap={2}>
+      <DashboardTicker fragmentRef={data} />
+      <Divider />
+      <DashboardFeatured fragmentRef={data} />
+      <Divider />
+      <DashboardSpotlight fragmentRef={data} />
+    </Stack>
+  );
+});
diff --git a/crypto/frontend/scenes/screener/ScreenerList.js b/crypto/frontend/scenes/screener/ScreenerList.js
new file mode 100644
index 0000000000000000000000000000000000000000..f83d9612cbca8794458ee7d28c0f29aef7793ddc
--- /dev/null
+++ b/crypto/frontend/scenes/screener/ScreenerList.js
@@ -0,0 +1,191 @@
+import {
+  Divider,
+  InputAdornment,
+  Stack,
+  Table,
+  TableBody,
+  TableCell,
+  TableFooter,
+  TableRow,
+  TextField,
+} from '@mui/material';
+import {
+  memo,
+  useDeferredValue,
+  useEffect,
+  useRef,
+  useState,
+  useTransition,
+} from 'react';
+import {graphql, usePaginationFragment} from 'react-relay';
+
+import {
+  LoadMoreButton,
+  NoData,
+  SortButton,
+  TransitionIndicator,
+} from '@/components';
+import {useSize} from '@/hooks';
+import {SearchIcon} from '@/icons';
+
+import ScreenerListItem from './ScreenerListItem';
+
+const Order = [
+  {
+    title: 'Market cap ↓',
+    expression: {price: {marketCap: 'DESC'}},
+  },
+  {
+    title: 'Change 24H ↓',
+    expression: {price: {change24Hour: 'DESC'}},
+  },
+  {
+    title: 'Change 24H ↑',
+    expression: {price: {change24Hour: 'ASC'}},
+  },
+  {
+    title: 'Symbol ↑',
+    expression: {symbol: 'ASC'},
+  },
+  {
+    title: 'Slug ↑',
+    expression: {slug: 'ASC'},
+  },
+  {
+    title: 'Name ↑',
+    expression: {name: 'ASC'},
+  },
+];
+
+export default memo(function ScreenerList({fragmentRef}) {
+  const {data, hasNext, loadNext, isLoadingNext, refetch} =
+    usePaginationFragment(
+      graphql`
+        fragment ScreenerListFragment_query on Query
+        @argumentDefinitions(
+          cursor: {type: "String"}
+          count: {type: "Int", defaultValue: 10}
+          where: {type: "AssetFilterInput"}
+          order: {
+            type: "[AssetSortInput!]"
+            defaultValue: {price: {marketCap: DESC}}
+          }
+        )
+        @refetchable(queryName: "ScreenerListRefetchableQuery") {
+          assets(after: $cursor, first: $count, where: $where, order: $order)
+            @connection(key: "ScreenerList_assets") {
+            edges {
+              node {
+                id
+                ...ScreenerListItemFragment_asset
+              }
+            }
+          }
+        }
+      `,
+      fragmentRef,
+    );
+
+  const [q, setQ] = useState('');
+  const qRef = useRef(q);
+  const deferredQ = useDeferredValue(q, {timeoutMs: 1000});
+
+  const [order, setOrder] = useState(0);
+  const orderRef = useRef(order);
+
+  const [busy, startTransition] = useTransition();
+
+  useEffect(() => {
+    if (qRef.current !== deferredQ || orderRef.current !== order) {
+      qRef.current = deferredQ;
+      orderRef.current = order;
+
+      startTransition(() => {
+        const variables = Object.assign(
+          {},
+          !!deferredQ && {
+            where: {
+              or: [
+                {symbol: {contains: deferredQ}},
+                {name: {contains: deferredQ}},
+                {slug: {contains: deferredQ}},
+              ],
+            },
+          },
+          !!order && {order: Order[order].expression},
+        );
+
+        refetch(variables);
+      });
+    }
+  }, [deferredQ, order]);
+
+  const [tableRef, size] = useSize();
+  const extended = size?.width > 400;
+
+  const assets = data.assets.edges;
+
+  return (
+    <Stack gap={2}>
+      <Stack
+        direction="row"
+        justifyContent="space-between"
+        alignItems="center"
+        px={2}
+        gap={20}
+      >
+        <TextField
+          type="search"
+          variant="standard"
+          value={q}
+          placeholder="Search all assets"
+          autoComplete="off"
+          size="small"
+          InputProps={{
+            startAdornment: (
+              <InputAdornment position="start">
+                <SearchIcon />
+              </InputAdornment>
+            ),
+            disableUnderline: true,
+          }}
+          autoFocus
+          sx={{flex: 1, border: 0}}
+          onChange={(e) => {
+            setQ(e.target.value);
+          }}
+        />
+        <SortButton options={Order} active={order} onChange={setOrder} />
+      </Stack>
+      <Divider />
+      <Stack px={4}>
+        {assets?.length || hasNext ? (
+          <TransitionIndicator in={busy}>
+            <Table ref={tableRef} size="medium">
+              <TableBody>
+                {assets.map(({node}) => (
+                  <ScreenerListItem
+                    key={node.id}
+                    fragmentRef={node}
+                    extended={extended}
+                  />
+                ))}
+              </TableBody>
+              {hasNext && (
+                <TableFooter>
+                  <TableRow>
+                    <TableCell colSpan={5} align="center">
+                      <LoadMoreButton busy={isLoadingNext} onClick={loadNext} />
+                    </TableCell>
+                  </TableRow>
+                </TableFooter>
+              )}
+            </Table>
+          </TransitionIndicator>
+        ) : (
+          <NoData message="Hmm, we can't find that asset." />
+        )}
+      </Stack>
+    </Stack>
+  );
+});
diff --git a/crypto/frontend/scenes/screener/index.js b/crypto/frontend/scenes/screener/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..a9db0150267df425ddffb4ee8554c5c277a8c214
--- /dev/null
+++ b/crypto/frontend/scenes/screener/index.js
@@ -0,0 +1,15 @@
+import {Suspense} from 'react';
+
+import {ActivityIndicator, ErrorBoundaryWithRetry} from '@/components';
+
+import ScreenerContainer from './ScreenerContainer';
+
+export const Screener = () => (
+  <ErrorBoundaryWithRetry>
+    {({cacheBuster}) => (
+      <Suspense fallback={<ActivityIndicator />}>
+        <ScreenerContainer cacheBuster={cacheBuster} />
+      </Suspense>
+    )}
+  </ErrorBoundaryWithRetry>
+);
diff --git a/crypto/frontend/scenes/viewer/ViewerSnapshot.js b/crypto/frontend/scenes/viewer/ViewerSnapshot.js
new file mode 100644
index 0000000000000000000000000000000000000000..7a128f535e98094bc03adf4f27189c97d9f79f8d
--- /dev/null
+++ b/crypto/frontend/scenes/viewer/ViewerSnapshot.js
@@ -0,0 +1,111 @@
+import {Stack, useTheme} from '@mui/material';
+import {memo, useCallback, useMemo, useState, useTransition} from 'react';
+import {
+  graphql,
+  useFragment,
+  useRefetchableFragment,
+  useSubscription,
+} from 'react-relay';
+
+import {Change, Chart, Price, SpanSelector} from '@/components';
+import {findClosestAccessibleColor} from '@/utils';
+
+const SmartChart = memo(function SmartChart({color, currency, span, data}) {
+  const theme = useTheme();
+
+  return (
+    <Chart
+      color={findClosestAccessibleColor(
+        color,
+        theme.palette.background.default,
+        3,
+      )}
+      currency={currency}
+      span={span}
+      data={data.map((item) => [item.price, item.epoch * 1000])}
+    />
+  );
+});
+
+export default memo(function ViewerSnapshot({fragmentRef}) {
+  const asset = useFragment(
+    graphql`
+      fragment ViewerSnapshotFragment_asset on Asset {
+        symbol
+        color
+        price {
+          ...ViewerSnapshotFragment_price
+        }
+      }
+    `,
+    fragmentRef,
+  );
+  const [price, refetch] = useRefetchableFragment(
+    graphql`
+      fragment ViewerSnapshotFragment_price on AssetPrice
+      @argumentDefinitions(span: {type: "ChangeSpan", defaultValue: DAY})
+      @refetchable(queryName: "ViewerSnapshotRefetchableQuery") {
+        currency
+        lastPrice
+        change(span: $span) {
+          percentageChange
+          history {
+            nodes {
+              epoch
+              price
+            }
+          }
+        }
+      }
+    `,
+    asset.price,
+  );
+
+  const [span, setSpan] = useState('DAY');
+  const [busy, startTransition] = useTransition();
+
+  const handleSpanChange = useCallback((e, value) => {
+    startTransition(() => {
+      setSpan(value);
+      refetch({span: value});
+    });
+  }, []);
+
+  useSubscription(
+    useMemo(
+      () => ({
+        subscription: graphql`
+          subscription ViewerSnapshotSubscription(
+            $symbol: String!
+            $span: ChangeSpan!
+          ) {
+            onPriceChange(symbols: [$symbol]) {
+              lastPrice
+              change(span: $span) {
+                percentageChange
+              }
+            }
+          }
+        `,
+        variables: {symbol: asset.symbol, span},
+      }),
+      [asset.symbol, span],
+    ),
+  );
+
+  return (
+    <Stack justifyContent="center" alignItems="center" gap={2}>
+      <Stack direction="row" gap={2}>
+        <Price value={price.lastPrice} options={{currency: price.currency}} />
+        <Change value={price.change.percentageChange} />
+      </Stack>
+      <SpanSelector span={span} busy={busy} onChange={handleSpanChange} />
+      <SmartChart
+        color={asset.color}
+        currency={price.currency}
+        span={span}
+        data={price.change.history.nodes}
+      />
+    </Stack>
+  );
+});
diff --git a/crypto/frontend/scenes/alerts/AlertsContainer.js b/crypto/frontend/scenes/alerts/AlertsContainer.js
new file mode 100644
index 0000000000000000000000000000000000000000..b11de0515cbfcb9ab664b9e9e0c887af69cc8459
--- /dev/null
+++ b/crypto/frontend/scenes/alerts/AlertsContainer.js
@@ -0,0 +1,47 @@
+import {memo, useState} from 'react';
+import {graphql, useLazyLoadQuery} from 'react-relay';
+
+import {Tab, TabPanel, Tabs} from '@/components';
+
+import {AddAlert, DeleteAlert} from './AlertsActions';
+
+export default memo(function AlertsContainer({symbol, cacheBuster}) {
+  const data = useLazyLoadQuery(
+    graphql`
+      query AlertsContainerQuery($symbol: String!) {
+        assetBySymbol(symbol: $symbol) {
+          hasAlerts
+          ...AlertsActionsAAFragment_asset
+          ...AlertsActionsDAFragment_asset
+        }
+      }
+    `,
+    {symbol},
+    {
+      fetchPolicy: 'store-and-network',
+      fetchKey: cacheBuster,
+    },
+  );
+  const hasAlerts = !!data.assetBySymbol?.hasAlerts;
+
+  const [tab, setTab] = useState(0);
+
+  const handleTabChange = (event, newValue) => {
+    setTab(newValue);
+  };
+
+  return (
+    <>
+      <Tabs value={tab} aria-label="alert actions" onChange={handleTabChange}>
+        <Tab index={0} label="New Alert" />
+        <Tab index={1} label="All Alerts" disabled={!hasAlerts} />
+      </Tabs>
+      <TabPanel index={0} value={tab}>
+        <AddAlert fragmentRef={data.assetBySymbol} symbol={symbol} />
+      </TabPanel>
+      <TabPanel index={1} value={tab}>
+        <DeleteAlert fragmentRef={data.assetBySymbol} symbol={symbol} />
+      </TabPanel>
+    </>
+  );
+});
diff --git a/crypto/frontend/scenes/dashboard/DashboardFeaturedCard.js b/crypto/frontend/scenes/dashboard/DashboardFeaturedCard.js
new file mode 100644
index 0000000000000000000000000000000000000000..06beb8f3edb97993351b4e41ae157d45b748ff8d
--- /dev/null
+++ b/crypto/frontend/scenes/dashboard/DashboardFeaturedCard.js
@@ -0,0 +1,135 @@
+import {
+  Box,
+  Card,
+  CardContent,
+  Link,
+  Stack,
+  Typography,
+  useTheme,
+} from '@mui/material';
+import NextLink from 'next/link';
+import {memo} from 'react';
+import {graphql, useFragment} from 'react-relay';
+
+import {MiniChart} from '@/components';
+import {
+  direction,
+  findClosestAccessibleColor,
+  formatCurrency,
+  formatPercent,
+} from '@/utils';
+
+const Symbol = memo(function Symbol({value, color}) {
+  return (
+    <Typography
+      variant="caption"
+      sx={(theme) => ({
+        color: findClosestAccessibleColor(
+          color,
+          theme.palette.background.default,
+          3,
+        ),
+        fontSize: theme.typography.fontSizeMedium,
+        fontWeight: theme.typography.fontWeightMedium,
+        lineHeight: 1,
+      })}
+    >
+      {value}
+    </Typography>
+  );
+});
+
+const Price = ({value, options, locales}) => (
+  <Typography
+    variant="caption"
+    sx={(theme) => ({
+      color: theme.palette.text.primary,
+      fontSize: theme.typography.fontSizeMedium,
+      fontWeight: theme.typography.fontWeightMedium,
+      lineHeight: 1,
+    })}
+  >
+    {formatCurrency(value, options, locales)}
+  </Typography>
+);
+
+const Change = ({value, options, locales}) => (
+  <Typography
+    variant="caption"
+    sx={(theme) => ({
+      color: theme.palette.trend[direction(value)],
+      fontSize: theme.typography.fontSizeMedium,
+      fontWeight: theme.typography.fontWeightMedium,
+      lineHeight: 1,
+    })}
+  >
+    {formatPercent(value, options, locales)}
+  </Typography>
+);
+
+const SmartChart = memo(function SmartChart({color, data}) {
+  const theme = useTheme();
+
+  return (
+    <MiniChart
+      color={findClosestAccessibleColor(
+        color,
+        theme.palette.background.default,
+        3,
+      )}
+      data={data.map((item) => [item.price, item.epoch * 1000])}
+    />
+  );
+});
+
+export default memo(function DashboardFeaturedCard({fragmentRef}) {
+  const asset = useFragment(
+    graphql`
+      fragment DashboardFeaturedCardFragment_asset on Asset {
+        symbol
+        color
+        price {
+          currency
+          lastPrice
+          change24Hour
+          change(span: DAY) {
+            history {
+              nodes {
+                epoch
+                price
+              }
+            }
+          }
+        }
+      }
+    `,
+    fragmentRef,
+  );
+  const {price} = asset;
+
+  return (
+    <NextLink
+      href="/currencies/[symbol]"
+      as={`/currencies/${asset.symbol}`}
+      passHref
+    >
+      <Link underline="none">
+        <Card variant="outlined">
+          <CardContent>
+            <Stack direction="row" gap={4}>
+              <Symbol value={asset.symbol} color={asset.color} />
+              <Price
+                value={price.lastPrice}
+                options={{currency: price.currency}}
+              />
+              <Change value={price.change24Hour} />
+            </Stack>
+          </CardContent>
+          <Box>
+            <SmartChart color={asset.color} data={price.change.history.nodes} />
+          </Box>
+        </Card>
+      </Link>
+    </NextLink>
+  );
+});
diff --git a/crypto/frontend/scenes/dashboard/DashboardTickerItem.js b/crypto/frontend/scenes/dashboard/DashboardTickerItem.js
new file mode 100644
index 0000000000000000000000000000000000000000..15b7199d20d492ccbf930e735802b394e2ce6930
--- /dev/null
+++ b/crypto/frontend/scenes/dashboard/DashboardTickerItem.js
@@ -0,0 +1,93 @@
+import {Link, Stack, Typography} from '@mui/material';
+import NextLink from 'next/link';
+import {memo} from 'react';
+import {graphql, useFragment} from 'react-relay';
+
+import {
+  direction,
+  findClosestAccessibleColor,
+  formatCurrency,
+  formatPercent,
+} from '@/utils';
+
+const Symbol = memo(function Symbol({value, color}) {
+  return (
+    <Typography
+      variant="caption"
+      sx={(theme) => ({
+        color: findClosestAccessibleColor(
+          color,
+          theme.palette.background.default,
+          3,
+        ),
+        fontSize: theme.typography.fontSizeTiny,
+        fontWeight: theme.typography.fontWeightMedium,
+        lineHeight: 1,
+      })}
+    >
+      {value}
+    </Typography>
+  );
+});
+
+const Price = ({value, options, locales}) => (
+  <Typography
+    variant="caption"
+    sx={(theme) => ({
+      color: theme.palette.text.primary,
+      fontSize: theme.typography.fontSizeMedium,
+      fontWeight: theme.typography.fontWeightMedium,
+      lineHeight: 1,
+    })}
+  >
+    {formatCurrency(value, options, locales)}
+  </Typography>
+);
+
+const Change = ({value, options, locales}) => (
+  <Typography
+    variant="caption"
+    sx={(theme) => ({
+      color: theme.palette.trend[direction(value)],
+      fontSize: theme.typography.fontSizeTiny,
+      fontWeight: theme.typography.fontWeightMedium,
+      lineHeight: 1,
+    })}
+  >
+    {formatPercent(value, options, locales)}
+  </Typography>
+);
+
+export default memo(function DashboardTickerItem({fragmentRef}) {
+  const asset = useFragment(
+    graphql`
+      fragment DashboardTickerItemFragment_asset on Asset {
+        symbol
+        color
+        price {
+          currency
+          lastPrice
+          change24Hour
+        }
+      }
+    `,
+    fragmentRef,
+  );
+  const {price} = asset;
+
+  return (
+    <NextLink
+      href="/currencies/[symbol]"
+      as={`/currencies/${asset.symbol}`}
+      passHref
+    >
+      <Link underline="none">
+        <Stack direction="column" spacing={1} minWidth={100}>
+          <Symbol value={asset.symbol} color={asset.color} />
+          <Price value={price.lastPrice} options={{currency: price.currency}} />
+          <Change value={price.change24Hour} />
+        </Stack>
+      </Link>
+    </NextLink>
+  );
+});
diff --git a/crypto/frontend/scenes/notifications/NotificationsContainer.js b/crypto/frontend/scenes/notifications/NotificationsContainer.js
new file mode 100644
index 0000000000000000000000000000000000000000..e8af2cf89a5570018c3d6da140c348a1bd21729d
--- /dev/null
+++ b/crypto/frontend/scenes/notifications/NotificationsContainer.js
@@ -0,0 +1,26 @@
+import {Stack} from '@mui/material';
+import {memo} from 'react';
+import {graphql, useLazyLoadQuery} from 'react-relay';
+
+import NotificationsList from './NotificationsList';
+
+export default memo(function NotificationsContainer({cacheBuster}) {
+  const data = useLazyLoadQuery(
+    graphql`
+      query NotificationsContainerQuery {
+        ...NotificationsListFragment_query
+      }
+    `,
+    {},
+    {
+      fetchPolicy: 'store-and-network',
+      fetchKey: cacheBuster,
+    },
+  );
+
+  return (
+    <Stack gap={2}>
+      <NotificationsList fragmentRef={data} />
+    </Stack>
+  );
+});
diff --git a/crypto/frontend/scenes/notifications/NotificationsManager.js b/crypto/frontend/scenes/notifications/NotificationsManager.js
new file mode 100644
index 0000000000000000000000000000000000000000..495e3ed315a2bedbbc7acc41350d4e1ad32ba549
--- /dev/null
+++ b/crypto/frontend/scenes/notifications/NotificationsManager.js
@@ -0,0 +1,48 @@
+import {Badge, IconButton, Portal, Tooltip} from '@mui/material';
+import {memo, useMemo, useState} from 'react';
+import {graphql, useSubscription} from 'react-relay';
+
+import {useSlots} from '@/hooks';
+import {NotificationsIcon} from '@/icons';
+
+export default memo(function NotificationsManager({onClick}) {
+  const [unread, setUnread] = useState(0);
+
+  const {menubar: menubarRef} = useSlots();
+
+  useSubscription(
+    useMemo(
+      () => ({
+        subscription: graphql`
+          subscription NotificationsManagerSubscription {
+            onNotification {
+              unreadNotifications
+            }
+          }
+        `,
+        variables: {},
+        onNext(response) {
+          setUnread(response.onNotification.unreadNotifications);
+        },
+      }),
+      [],
+    ),
+  );
+
+  return (
+    <Portal container={menubarRef.current}>
+      <Tooltip title="Notifications">
+        <IconButton aria-label="notifications" size="small" onClick={onClick}>
+          <Badge
+            variant="dot"
+            color="primary"
+            overlap="circular"
+            invisible={!unread}
+          >
+            <NotificationsIcon fontSize="inherit" />
+          </Badge>
+        </IconButton>
+      </Tooltip>
+    </Portal>
+  );
+});
diff --git a/crypto/frontend/scenes/screener/ScreenerContainer.js b/crypto/frontend/scenes/screener/ScreenerContainer.js
new file mode 100644
index 0000000000000000000000000000000000000000..f569c1d51e402c59ea6fb7c423c3b3ba9467e940
--- /dev/null
+++ b/crypto/frontend/scenes/screener/ScreenerContainer.js
@@ -0,0 +1,23 @@
+import {Stack} from '@mui/material';
+import {memo} from 'react';
+import {graphql, useLazyLoadQuery} from 'react-relay';
+
+import ScreenerList from './ScreenerList';
+
+export default memo(function ScreenerContainer({cacheBuster}) {
+  const data = useLazyLoadQuery(
+    graphql`
+      query ScreenerContainerQuery {
+        ...ScreenerListFragment_query
+      }
+    `,
+    {},
+    {fetchKey: cacheBuster},
+  );
+
+  return (
+    <Stack gap={2}>
+      <ScreenerList fragmentRef={data} />
+    </Stack>
+  );
+});
diff --git a/crypto/frontend/scenes/alerts/index.js b/crypto/frontend/scenes/alerts/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..a4b388d70eb41b52cca23e9b886f2d0dbe3210ef
--- /dev/null
+++ b/crypto/frontend/scenes/alerts/index.js
@@ -0,0 +1,27 @@
+import {Suspense} from 'react';
+
+import {ActivityIndicator, Drawer, ErrorBoundaryWithRetry} from '@/components';
+import {useAlerts} from '@/hooks';
+
+import AlertsContainer from './AlertsContainer';
+
+export const Alerts = ({symbol}) => {
+  const {active, hide} = useAlerts();
+
+  return (
+    <Drawer
+      anchor="bottom"
+      open={active}
+      PaperProps={{sx: {minHeight: 300}}}
+      onClose={hide}
+    >
+      <ErrorBoundaryWithRetry key={symbol}>
+        {({cacheBuster}) => (
+          <Suspense fallback={<ActivityIndicator />}>
+            <AlertsContainer symbol={symbol} cacheBuster={cacheBuster} />
+          </Suspense>
+        )}
+      </ErrorBoundaryWithRetry>
+    </Drawer>
+  );
+};
diff --git a/crypto/frontend/scenes/settings/SettingsLinks.js b/crypto/frontend/scenes/settings/SettingsLinks.js
new file mode 100644
index 0000000000000000000000000000000000000000..dddbc6b955a09eb7629f54827e29b853f482e3fa
--- /dev/null
+++ b/crypto/frontend/scenes/settings/SettingsLinks.js
@@ -0,0 +1,76 @@
+import {
+  AccordionActions,
+  AccordionDetails,
+  Button,
+  Stack,
+  TextField,
+} from '@mui/material';
+import {memo, useRef} from 'react';
+
+import {Config, syncWithStorage} from '@/config';
+import {LinksIcon} from '@/icons';
+
+import {Group} from './Group';
+
+export default memo(function SettingsLinks({active, onChange}) {
+  const httpRef = useRef(null);
+  const wsRef = useRef(null);
+
+  return (
+    <Group
+      id="links"
+      icon={LinksIcon}
+      title="Links"
+      active={active}
+      onChange={onChange}
+    >
+      <form
+        name="links"
+        onSubmit={(e) => {
+          e.preventDefault();
+
+          const http = httpRef.current?.value;
+          const ws = wsRef.current?.value;
+
+          syncWithStorage({
+            HTTP_ENDPOINT: http,
+            WS_ENDPOINT: ws,
+          });
+        }}
+      >
+        <AccordionDetails id="panel-links-content" sx={{p: 6}}>
+          <Stack direction="column" gap={8}>
+            <TextField
+              inputRef={httpRef}
+              label="HTTP Endpoint"
+              defaultValue={Config.HTTP_ENDPOINT}
+              autoComplete="http"
+              helperText="The URL of the server to send GraphQL queries over HTTP."
+              required
+              fullWidth
+            />
+            <TextField
+              inputRef={wsRef}
+              label="WS Endpoint"
+              defaultValue={Config.WS_ENDPOINT}
+              autoComplete="ws"
+              helperText="The URL of the server to send GraphQL queries over WebSocket."
+              required
+              fullWidth
+            />
+          </Stack>
+        </AccordionDetails>
+        <AccordionActions
+          sx={{flexDirection: 'row-reverse', justifyContent: 'flex-start'}}
+        >
+          <Button type="submit" color="primary">
+            Save
+          </Button>
+          <Button type="reset" color="secondary">
+            Cancel
+          </Button>
+        </AccordionActions>
+      </form>
+    </Group>
+  );
+});
diff --git a/crypto/frontend/scenes/dashboard/DashboardSpotlight.js b/crypto/frontend/scenes/dashboard/DashboardSpotlight.js
new file mode 100644
index 0000000000000000000000000000000000000000..0e0c16bc1147b8da90c6294959e7656c15dde307
--- /dev/null
+++ b/crypto/frontend/scenes/dashboard/DashboardSpotlight.js
@@ -0,0 +1,81 @@
+import {Divider} from '@mui/material';
+import {Suspense, SuspenseList, memo} from 'react';
+import {graphql, useFragment} from 'react-relay';
+
+import {BearishIcon, BullishIcon} from '@/icons';
+
+import DashboardSpotlightCard from './DashboardSpotlightCard';
+
+const Gainers = ({fragmentRef}) => {
+  const data = useFragment(
+    graphql`
+      fragment DashboardSpotlightGainersFragment_query on Query {
+        gainers: assets(
+          first: 5
+          where: {price: {change24Hour: {gt: 0}}}
+          order: {price: {change24Hour: DESC}}
+        ) {
+          ...DashboardSpotlightCardFragment_asset @defer(label: "gainers")
+        }
+      }
+    `,
+    fragmentRef,
+  );
+
+  return (
+    <DashboardSpotlightCard
+      fragmentRef={data.gainers}
+      title="Top Gainers"
+      avatar={<BullishIcon />}
+    />
+  );
+};
+
+const Losers = ({fragmentRef}) => {
+  const data = useFragment(
+    graphql`
+      fragment DashboardSpotlightLosersFragment_query on Query {
+        losers: assets(
+          first: 5
+          where: {price: {change24Hour: {lt: 0}}}
+          order: {price: {change24Hour: ASC}}
+        ) {
+          ...DashboardSpotlightCardFragment_asset @defer(label: "losers")
+        }
+      }
+    `,
+    fragmentRef,
+  );
+
+  return (
+    <DashboardSpotlightCard
+      fragmentRef={data.losers}
+      title="Top Losers"
+      avatar={<BearishIcon />}
+    />
+  );
+};
+
+export default memo(function DashboardSpotlight({fragmentRef}) {
+  const data = useFragment(
+    graphql`
+      fragment DashboardSpotlightFragment_query on Query {
+        ...DashboardSpotlightGainersFragment_query
+        ...DashboardSpotlightLosersFragment_query
+      }
+    `,
+    fragmentRef,
+  );
+
+  return (
+    <SuspenseList revealOrder="forwards">
+      <Suspense fallback={false}>
+        <Gainers fragmentRef={data} />
+      </Suspense>
+      <Divider />
+      <Suspense fallback={false}>
+        <Losers fragmentRef={data} />
+      </Suspense>
+    </SuspenseList>
+  );
+});
diff --git a/crypto/frontend/pages/index.js b/crypto/frontend/pages/index.js
index 8b3e2fa25f805f5e59f6da3bc19b8f1365bbb124..f5b3bfcc5a809b3d23c30b8a2d16fc34f5eabf4a 100644
--- a/crypto/frontend/pages/index.js
+++ b/crypto/frontend/pages/index.js
@@ -1 +1 @@
-export {Dummy as default} from '@/components';
+export {Dashboard as default} from '@/scenes';
diff --git a/crypto/frontend/scenes/settings/index.js b/crypto/frontend/scenes/settings/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..decad83e3475289c4703057a581da1dbc0656752
--- /dev/null
+++ b/crypto/frontend/scenes/settings/index.js
@@ -0,0 +1,15 @@
+import {Suspense} from 'react';
+
+import {ActivityIndicator, ErrorBoundaryWithRetry} from '@/components';
+
+import SettingsContainer from './SettingsContainer';
+
+export const Settings = ({symbol}) => (
+  <ErrorBoundaryWithRetry key={symbol}>
+    {({cacheBuster}) => (
+      <Suspense fallback={<ActivityIndicator />}>
+        <SettingsContainer cacheBuster={cacheBuster} />
+      </Suspense>
+    )}
+  </ErrorBoundaryWithRetry>
+);
diff --git a/crypto/frontend/pages/dashboard.js b/crypto/frontend/pages/dashboard.js
new file mode 100644
index 0000000000000000000000000000000000000000..f5b3bfcc5a809b3d23c30b8a2d16fc34f5eabf4a
--- /dev/null
+++ b/crypto/frontend/pages/dashboard.js
@@ -0,0 +1 @@
+export {Dashboard as default} from '@/scenes';
diff --git a/crypto/frontend/scenes/screener/ScreenerListItem.js b/crypto/frontend/scenes/screener/ScreenerListItem.js
new file mode 100644
index 0000000000000000000000000000000000000000..1963f60f1dad26dd8e94568e66c00d2b184f1e0f
--- /dev/null
+++ b/crypto/frontend/scenes/screener/ScreenerListItem.js
@@ -0,0 +1,200 @@
+import {
+  Checkbox,
+  Link,
+  Stack,
+  TableCell,
+  TableRow,
+  Typography,
+} from '@mui/material';
+import NextLink from 'next/link';
+import {memo, useCallback} from 'react';
+import {graphql, useFragment, useMutation} from 'react-relay';
+
+import {CryptoIcon, WatchIcon, WatchedIcon} from '@/icons';
+import {
+  direction,
+  formatCurrency,
+  formatCurrencyUsingCompactNotation,
+  formatPercent,
+} from '@/utils';
+
+const useAddToWatchlist = () => {
+  const [commit, isInFlight] = useMutation(graphql`
+    mutation ScreenerListItemAATWMutation($input: AddAssetToWatchlistInput!) {
+      addAssetToWatchlist(input: $input) {
+        watchlist {
+          assets {
+            nodes {
+              isInWatchlist
+            }
+          }
+        }
+      }
+    }
+  `);
+
+  const execute = useCallback(
+    ({id, symbol}) => {
+      commit({
+        variables: {input: {symbol}},
+        optimisticUpdater(store) {
+          const record = store.get(id);
+
+          record.setValue(true, 'isInWatchlist');
+        },
+        onCompleted() {
+          console.log(`${symbol} was added to the watchlist`);
+        },
+        onError() {
+          console.log(
+            `there was a problem with ${symbol} while adding to the watchlist`,
+          );
+        },
+      });
+    },
+    [commit],
+  );
+
+  return [execute, isInFlight];
+};
+
+const useRemoveFromWatchlist = () => {
+  const [commit, isInFlight] = useMutation(graphql`
+    mutation ScreenerListItemRAFWMutation(
+      $input: RemoveAssetFromWatchlistInput!
+    ) {
+      removeAssetFromWatchlist(input: $input) {
+        removedAsset {
+          isInWatchlist
+        }
+      }
+    }
+  `);
+
+  const execute = useCallback(
+    ({id, symbol}) => {
+      commit({
+        variables: {input: {symbol}},
+        optimisticUpdater: (store) => {
+          const record = store.get(id);
+
+          record.setValue(false, 'isInWatchlist');
+        },
+        onCompleted: () => {
+          console.log(`${symbol} was removed from the watchlist`);
+        },
+        onError: () => {
+          console.log(
+            `there was a problem with ${symbol} while removing from the watchlist`,
+          );
+        },
+      });
+    },
+    [commit],
+  );
+
+  return [execute, isInFlight];
+};
+
+export default memo(function ScreenerListItem({fragmentRef, extended}) {
+  const asset = useFragment(
+    graphql`
+      fragment ScreenerListItemFragment_asset on Asset {
+        id
+        symbol
+        name
+        imageUrl
+        isInWatchlist
+        price {
+          currency
+          lastPrice
+          change24Hour
+          marketCap
+        }
+      }
+    `,
+    fragmentRef,
+  );
+  const {price} = asset;
+
+  const [addToWatchlist] = useAddToWatchlist();
+  const [removeFromWatchlist] = useRemoveFromWatchlist();
+
+  const labelId = `row:${asset.symbol}`;
+
+  return (
+    <TableRow
+      key={asset.symbol}
+      role="checkbox"
+      aria-checked={!!asset.isInWatchlist}
+      tabIndex={-1}
+      hover
+    >
+      <TableCell component="th" scope="row" sx={{width: 'auto'}}>
+        <NextLink
+          href="/currencies/[symbol]"
+          as={`/currencies/${asset.symbol}`}
+          passHref
+        >
+          <Link underline="none">
+            <Stack direction="row" alignItems="center" gap={2}>
+              <CryptoIcon src={asset.imageUrl} alt={asset.name} size="medium" />
+              <Stack direction="column">
+                <Typography id={labelId} variant="caption">
+                  {asset.name}
+                </Typography>
+                <Typography variant="caption" color="text.secondary">
+                  {asset.symbol}
+                </Typography>
+              </Stack>
+            </Stack>
+          </Link>
+        </NextLink>
+      </TableCell>
+      <TableCell
+        align="right"
+        sx={{width: 100, paddingLeft: 0, fontWeight: 600}}
+      >
+        {price && formatCurrency(price.lastPrice, {currency: price.currency})}
+      </TableCell>
+      <TableCell
+        align="right"
+        sx={(theme) => ({
+          width: 70,
+          paddingLeft: 0,
+          color: theme.palette.trend[direction(price?.change24Hour)],
+        })}
+      >
+        {price && formatPercent(price.change24Hour)}
+      </TableCell>
+      {extended && (
+        <TableCell align="right" sx={{width: 70, paddingLeft: 0}}>
+          {price &&
+            formatCurrencyUsingCompactNotation(price.marketCap, {
+              currency: price.currency,
+            })}
+        </TableCell>
+      )}
+      <TableCell align="right" sx={{width: 46, paddingLeft: 0}}>
+        <Checkbox
+          color="primary"
+          icon={<WatchIcon />}
+          checkedIcon={<WatchedIcon />}
+          checked={!!asset.isInWatchlist}
+          disabled={asset.isInWatchlist === null}
+          size="small"
+          inputProps={{
+            'aria-labelledby': labelId,
+          }}
+          onChange={(event) => {
+            if (event.target.checked) {
+              addToWatchlist(asset);
+            } else {
+              removeFromWatchlist(asset);
+            }
+          }}
+        />
+      </TableCell>
+    </TableRow>
+  );
+});
diff --git a/crypto/frontend/scenes/viewer/ViewerContainer.js b/crypto/frontend/scenes/viewer/ViewerContainer.js
new file mode 100644
index 0000000000000000000000000000000000000000..1a3b39bc0f622c02cb63d53eec841e3e3d5a5387
--- /dev/null
+++ b/crypto/frontend/scenes/viewer/ViewerContainer.js
@@ -0,0 +1,44 @@
+import {Stack} from '@mui/material';
+import ErrorPage from 'next/error';
+import {memo} from 'react';
+import {graphql, useLazyLoadQuery} from 'react-relay';
+
+import ViewerHeader from './ViewerHeader';
+import ViewerOverview from './ViewerOverview';
+import ViewerResources from './ViewerResources';
+import ViewerSnapshot from './ViewerSnapshot';
+import ViewerStats from './ViewerStats';
+
+export default memo(function ViewerContainer({symbol, cacheBuster}) {
+  const data = useLazyLoadQuery(
+    graphql`
+      query ViewerContainerQuery($symbol: String!) {
+        assetBySymbol(symbol: $symbol) {
+          ...ViewerHeaderFragment_asset
+          ...ViewerSnapshotFragment_asset
+          ...ViewerStatsFragment_asset
+          ...ViewerOverviewFragment_asset
+          ...ViewerResourcesFragment_asset
+        }
+      }
+    `,
+    {symbol},
+    {fetchKey: cacheBuster},
+  );
+
+  if (!data.assetBySymbol) {
+    return (
+      <ErrorPage statusCode={404} title="This currency could not be found" />
+    );
+  }
+
+  return (
+    <Stack gap={4}>
+      <ViewerHeader fragmentRef={data.assetBySymbol} />
+      <ViewerSnapshot fragmentRef={data.assetBySymbol} />
+      <ViewerStats fragmentRef={data.assetBySymbol} />
+      <ViewerOverview fragmentRef={data.assetBySymbol} />
+      <ViewerResources fragmentRef={data.assetBySymbol} />
+    </Stack>
+  );
+});
diff --git a/crypto/frontend/scenes/viewer/ViewerOverview.js b/crypto/frontend/scenes/viewer/ViewerOverview.js
new file mode 100644
index 0000000000000000000000000000000000000000..29b0e0a7e1cda7997ac5f22029906d19ce7c3583
--- /dev/null
+++ b/crypto/frontend/scenes/viewer/ViewerOverview.js
@@ -0,0 +1,25 @@
+import {Stack, Typography} from '@mui/material';
+import {memo} from 'react';
+import {graphql, useFragment} from 'react-relay';
+
+export default memo(function ViewerOverview({fragmentRef}) {
+  const asset = useFragment(
+    graphql`
+      fragment ViewerOverviewFragment_asset on Asset {
+        description
+      }
+    `,
+    fragmentRef,
+  );
+
+  return (
+    <Stack p={2}>
+      <Typography variant="h3" gutterBottom>
+        Overview
+      </Typography>
+      <Typography variant="body2" py={1} px={2}>
+        {asset.description}
+      </Typography>
+    </Stack>
+  );
+});
diff --git a/crypto/frontend/pages/currencies/[symbol].js b/crypto/frontend/pages/currencies/[symbol].js
new file mode 100644
index 0000000000000000000000000000000000000000..3c71c4fd27d1cd5e463ef301131acef9b3f03900
--- /dev/null
+++ b/crypto/frontend/pages/currencies/[symbol].js
@@ -0,0 +1,12 @@
+import {Alerts, Viewer} from '@/scenes';
+
+export default function Currencies({symbol}) {
+  return (
+    <>
+      <Viewer symbol={symbol} />
+      <Alerts symbol={symbol} />
+    </>
+  );
+}
+
+Currencies.getInitialProps = ({query: {symbol}}) => ({symbol});
diff --git a/crypto/frontend/scenes/viewer/index.js b/crypto/frontend/scenes/viewer/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..25af2890b01b5191f6defbcfb9ec67687c92addc
--- /dev/null
+++ b/crypto/frontend/scenes/viewer/index.js
@@ -0,0 +1,15 @@
+import {Suspense} from 'react';
+
+import {ActivityIndicator, ErrorBoundaryWithRetry} from '@/components';
+
+import ViewerContainer from './ViewerContainer';
+
+export const Viewer = ({symbol}) => (
+  <ErrorBoundaryWithRetry key={symbol}>
+    {({cacheBuster}) => (
+      <Suspense fallback={<ActivityIndicator />}>
+        <ViewerContainer symbol={symbol} cacheBuster={cacheBuster} />
+      </Suspense>
+    )}
+  </ErrorBoundaryWithRetry>
+);
diff --git a/crypto/frontend/scenes/watchlist/WatchlistContainer.js b/crypto/frontend/scenes/watchlist/WatchlistContainer.js
new file mode 100644
index 0000000000000000000000000000000000000000..dd919863f70f6eee54aae658aea93251013a6b93
--- /dev/null
+++ b/crypto/frontend/scenes/watchlist/WatchlistContainer.js
@@ -0,0 +1,26 @@
+import {Stack} from '@mui/material';
+import {memo} from 'react';
+import {graphql, useLazyLoadQuery} from 'react-relay';
+
+import WatchlistList from './WatchlistList';
+
+export default memo(function WatchlistContainer({cacheBuster}) {
+  const data = useLazyLoadQuery(
+    graphql`
+      query WatchlistContainerQuery {
+        ...WatchlistListFragment_query
+      }
+    `,
+    {},
+    {
+      fetchPolicy: 'store-and-network',
+      fetchKey: cacheBuster,
+    },
+  );
+
+  return (
+    <Stack gap={2}>
+      <WatchlistList fragmentRef={data} />
+    </Stack>
+  );
+});
diff --git a/crypto/frontend/scenes/watchlist/index.js b/crypto/frontend/scenes/watchlist/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..dd48725b0059cc46bd6754c47d86001b0dcbc1c8
--- /dev/null
+++ b/crypto/frontend/scenes/watchlist/index.js
@@ -0,0 +1,15 @@
+import {Suspense} from 'react';
+
+import {ActivityIndicator, ErrorBoundaryWithRetry} from '@/components';
+
+import WatchlistContainer from './WatchlistContainer';
+
+export const Watchlist = () => (
+  <ErrorBoundaryWithRetry>
+    {({cacheBuster}) => (
+      <Suspense fallback={<ActivityIndicator />}>
+        <WatchlistContainer cacheBuster={cacheBuster} />
+      </Suspense>
+    )}
+  </ErrorBoundaryWithRetry>
+);
diff --git a/crypto/frontend/scenes/dashboard/DashboardSpotlightItem.js b/crypto/frontend/scenes/dashboard/DashboardSpotlightItem.js
new file mode 100644
index 0000000000000000000000000000000000000000..db4f5008298753d18338d8e94c13889c4c2775da
--- /dev/null
+++ b/crypto/frontend/scenes/dashboard/DashboardSpotlightItem.js
@@ -0,0 +1,192 @@
+import {
+  Checkbox,
+  Link,
+  Stack,
+  TableCell,
+  TableRow,
+  Typography,
+} from '@mui/material';
+import NextLink from 'next/link';
+import {useCallback} from 'react';
+import {graphql, useFragment, useMutation} from 'react-relay';
+
+import {CryptoIcon, WatchIcon, WatchedIcon} from '@/icons';
+import {direction, formatCurrency, formatPercent} from '@/utils';
+
+const useAddToWatchlist = () => {
+  const [commit, isInFlight] = useMutation(graphql`
+    mutation DashboardSpotlightItemAATWMutation(
+      $input: AddAssetToWatchlistInput!
+    ) {
+      addAssetToWatchlist(input: $input) {
+        watchlist {
+          assets {
+            nodes {
+              isInWatchlist
+            }
+          }
+        }
+      }
+    }
+  `);
+
+  const execute = useCallback(
+    ({id, symbol}) => {
+      commit({
+        variables: {input: {symbol}},
+        optimisticUpdater(store) {
+          const record = store.get(id);
+
+          record.setValue(true, 'isInWatchlist');
+        },
+        onCompleted() {
+          console.log(`${symbol} was added to the watchlist`);
+        },
+        onError() {
+          console.log(
+            `there was a problem with ${symbol} while adding to the watchlist`,
+          );
+        },
+      });
+    },
+    [commit],
+  );
+
+  return [execute, isInFlight];
+};
+
+const useRemoveFromWatchlist = () => {
+  const [commit, isInFlight] = useMutation(graphql`
+    mutation DashboardSpotlightItemRAFWMutation(
+      $input: RemoveAssetFromWatchlistInput!
+    ) {
+      removeAssetFromWatchlist(input: $input) {
+        removedAsset {
+          isInWatchlist
+        }
+      }
+    }
+  `);
+
+  const execute = useCallback(
+    ({id, symbol}) => {
+      commit({
+        variables: {input: {symbol}},
+        optimisticUpdater: (store) => {
+          const record = store.get(id);
+
+          record.setValue(false, 'isInWatchlist');
+        },
+        onCompleted: () => {
+          console.log(`${symbol} was removed from the watchlist`);
+        },
+        onError: () => {
+          console.log(
+            `there was a problem with ${symbol} while removing from the watchlist`,
+          );
+        },
+      });
+    },
+    [commit],
+  );
+
+  return [execute, isInFlight];
+};
+
+export default function DashboardSpotlightItem({fragmentRef, view}) {
+  const asset = useFragment(
+    graphql`
+      fragment DashboardSpotlightItemFragment_asset on Asset {
+        id
+        symbol
+        name
+        imageUrl
+        isInWatchlist
+        price {
+          currency
+          lastPrice
+          change24Hour
+        }
+      }
+    `,
+    fragmentRef,
+  );
+  const {price} = asset;
+
+  const [addToWatchlist] = useAddToWatchlist();
+  const [removeFromWatchlist] = useRemoveFromWatchlist();
+
+  const labelId = `row:${asset.symbol}`;
+
+  return (
+    <TableRow
+      key={asset.symbol}
+      role="checkbox"
+      aria-checked={!!asset.isInWatchlist}
+      tabIndex={-1}
+      hover
+    >
+      <TableCell component="th" scope="row" sx={{width: 'auto'}}>
+        <NextLink
+          href="/currencies/[symbol]"
+          as={`/currencies/${asset.symbol}`}
+          passHref
+        >
+          <Link underline="none">
+            <Stack direction="row" alignItems="center" gap={2}>
+              <CryptoIcon src={asset.imageUrl} alt={asset.name} size="medium" />
+              <Stack direction="column">
+                <Typography id={labelId} variant="caption">
+                  {asset.name}
+                </Typography>
+                <Typography variant="caption" color="text.secondary">
+                  {asset.symbol}
+                </Typography>
+              </Stack>
+            </Stack>
+          </Link>
+        </NextLink>
+      </TableCell>
+      {view === 'price' && (
+        <TableCell
+          align="right"
+          sx={{width: 100, paddingLeft: 0, fontWeight: 600}}
+        >
+          {price && formatCurrency(price.lastPrice, {currency: price.currency})}
+        </TableCell>
+      )}
+      {view === 'change' && (
+        <TableCell
+          align="right"
+          sx={(theme) => ({
+            width: 100,
+            paddingLeft: 0,
+            color: theme.palette.trend[direction(price?.change24Hour)],
+          })}
+        >
+          {price && formatPercent(price.change24Hour)}
+        </TableCell>
+      )}
+      <TableCell align="right" sx={{width: 46, paddingLeft: 0}}>
+        <Checkbox
+          color="primary"
+          icon={<WatchIcon />}
+          checkedIcon={<WatchedIcon />}
+          checked={!!asset.isInWatchlist}
+          disabled={asset.isInWatchlist === null}
+          size="small"
+          inputProps={{
+            'aria-labelledby': labelId,
+          }}
+          onChange={(event) => {
+            if (event.target.checked) {
+              addToWatchlist(asset);
+            } else {
+              removeFromWatchlist(asset);
+            }
+          }}
+        />
+      </TableCell>
+    </TableRow>
+  );
+}
diff --git a/crypto/frontend/scenes/viewer/ViewerStats.js b/crypto/frontend/scenes/viewer/ViewerStats.js
new file mode 100644
index 0000000000000000000000000000000000000000..9c0da78e83755d9c5615c1afdd14859a1a9975c6
--- /dev/null
+++ b/crypto/frontend/scenes/viewer/ViewerStats.js
@@ -0,0 +1,231 @@
+import styled from '@emotion/styled';
+import {Box, LinearProgress, Stack, Tooltip, Typography} from '@mui/material';
+import {memo} from 'react';
+import {graphql, useFragment} from 'react-relay';
+
+import {InfoIcon} from '@/icons';
+import {formatPercent} from '@/utils';
+import {
+  formatCurrencyUsingCompactNotation,
+  formatDecimalUnitUsingCompactNotation,
+} from '@/utils';
+
+const Block = styled.div(
+  ({theme}) => `
+  display: grid;
+  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
+  column-gap: ${theme.spacing(2)};
+  `,
+);
+
+const $dl = styled.dl(
+  ({theme}) => `
+  padding: ${theme.spacing(1, 2)};
+  border-bottom: 1px solid ${theme.palette.line};
+  margin-top: 0;
+  margin-bottom: 0;
+  display: flex;
+  flex-direction: column;
+  justify-content: space-between;
+  gap: ${theme.spacing(1)};
+`,
+);
+
+const $dt = styled.dt(
+  ({theme}) => `
+  display: flex;
+  gap: ${theme.spacing(1)};
+  font-size: ${theme.typography.fontSizeSmall};
+  font-weight: ${theme.typography.fontWeightRegular};
+`,
+);
+
+const $dd = styled.dd(
+  ({theme, align = 'end'}) => `
+  margin: 0;
+  align-self: ${align};
+  font-size: ${theme.typography.fontSizeMedium};
+  font-weight: ${theme.typography.fontWeightMedium};
+  line-height: 1;
+`,
+);
+
+const InfoText = styled(Typography)(
+  ({theme}) => `
+  p {
+    margin: 0;
+  }
+
+  p + p {
+    margin-top: ${theme.spacing(3)};
+  }
+`,
+);
+
+const Info = ({children}) => (
+  <Tooltip
+    title={<InfoText variant="body2">{children}</InfoText>}
+    arrow
+    componentsProps={{
+      tooltip: {
+        sx: {
+          maxWidth: 200,
+          paddingY: 2,
+          paddingX: 3,
+          borderRadius: 2,
+        },
+      },
+    }}
+  >
+    <InfoIcon fontSize="inherit" />
+  </Tooltip>
+);
+
+const Meter = ({value}) => {
+  const buy = value >= 0.5;
+  const sell = !buy;
+  const relative = buy ? value : 1 - value;
+  const absolute = relative * 100;
+  const percent = formatPercent(relative, {
+    minimumFractionDigits: 0,
+    signDisplay: 'never',
+  });
+
+  return (
+    <Box sx={{display: 'flex', alignItems: 'center', gap: 2}}>
+      {buy && <span>{percent} buy</span>}
+      <LinearProgress
+        variant="determinate"
+        color="inherit"
+        value={absolute}
+        sx={{
+          direction: 'rtl',
+          flex: 1,
+          color: buy ? 'trend.positive' : 'trend.negative',
+          transform: sell && 'rotate(180deg)',
+        }}
+      />
+      {sell && <span>{percent} sell</span>}
+    </Box>
+  );
+};
+
+export default memo(function ViewerStats({fragmentRef}) {
+  const asset = useFragment(
+    graphql`
+      fragment ViewerStatsFragment_asset on Asset {
+        price {
+          currency
+          marketCap
+          volume24Hour
+          volumePercentChange24Hour
+          maxSupply
+          circulatingSupply
+          tradingActivity
+          tradableMarketCapRank
+        }
+      }
+    `,
+    fragmentRef,
+  );
+
+  if (!asset?.price) {
+    return null;
+  }
+
+  return (
+    <Stack p={2}>
+      <Typography variant="h3" gutterBottom>
+        Market stats
+      </Typography>
+      <Block>
+        <$dl>
+          <$dt>
+            Market Cap
+            <Info>
+              <p>
+                The total market value of a cryptocurrency's circulating supply.
+              </p>
+              <p>Market Cap = Current Price x Circulating Supply.</p>
+            </Info>
+          </$dt>
+          <$dd>
+            {formatCurrencyUsingCompactNotation(asset.price.marketCap, {
+              currency: asset.price.currency,
+            })}
+          </$dd>
+        </$dl>
+        <$dl>
+          <$dt>
+            Volume 24h
+            <Info>
+              <p>
+                A measure of how much of a cryptocurrency was traded in the last
+                24 hours.
+              </p>
+            </Info>
+          </$dt>
+          <$dd>
+            {formatCurrencyUsingCompactNotation(asset.price.volume24Hour, {
+              currency: asset.price.currency,
+            })}
+          </$dd>
+        </$dl>
+        <$dl>
+          <$dt>
+            Circulating Supply
+            <Info>
+              <p>
+                The amount of coins that are circulating in the market and are
+                in public hands. It is analogous to the flowing shares in the
+                stock market.
+              </p>
+            </Info>
+          </$dt>
+          <$dd>
+            {formatDecimalUnitUsingCompactNotation(
+              asset.price.circulatingSupply,
+            )}
+          </$dd>
+        </$dl>
+        <$dl>
+          <$dt>
+            Max Supply
+            <Info>
+              <p>
+                The maximum amount of coins that will ever exist in the lifetime
+                of the cryptocurrency.
+              </p>
+            </Info>
+          </$dt>
+          <$dd>
+            {formatDecimalUnitUsingCompactNotation(asset.price.maxSupply)}
+          </$dd>
+        </$dl>
+        <$dl>
+          <$dt>
+            Trading activity
+            <Info>
+              <p>Market direction over the past 24 hours through trading.</p>
+            </Info>
+          </$dt>
+          <$dd align="auto">
+            <Meter value={asset.price.tradingActivity} />
+          </$dd>
+        </$dl>
+        <$dl>
+          <$dt>
+            Popularity
+            <Info>
+              <p>
+                Popularity is based on the relative market cap of tradable
+                assets
+              </p>
+            </Info>
+          </$dt>
+          <$dd>#{asset.price.tradableMarketCapRank}</$dd>
+        </$dl>
+      </Block>
+    </Stack>
+  );
+});
diff --git a/crypto/frontend/scenes/settings/SettingsProfile.js b/crypto/frontend/scenes/settings/SettingsProfile.js
new file mode 100644
index 0000000000000000000000000000000000000000..8bb53a87c94978b5e7285eee838b04e6c5c13ec7
--- /dev/null
+++ b/crypto/frontend/scenes/settings/SettingsProfile.js
@@ -0,0 +1,199 @@
+import {
+  AccordionActions,
+  AccordionDetails,
+  Avatar,
+  Button,
+  IconButton,
+  Stack,
+  TextField,
+} from '@mui/material';
+import {memo, useCallback, useEffect, useRef, useState} from 'react';
+import {useDropzone} from 'react-dropzone';
+import {graphql, useFragment, useMutation} from 'react-relay';
+
+import {DeleteIcon, FileUploadIcon, ProfileIcon} from '@/icons';
+
+import {Group} from './Group';
+
+const useUpdateUserProfile = () => {
+  const [commit, isInFlight] = useMutation(graphql`
+    mutation SettingsProfileUUPMutation($input: UpdateUserProfileInput!) {
+      updateUserProfile(input: $input) {
+        updatedUser {
+          displayName
+          imageUrl
+        }
+      }
+    }
+  `);
+
+  const execute = useCallback(
+    ({id, displayName, image, previewUrl}) => {
+      commit({
+        variables: {
+          input: Object.assign({displayName}, image !== undefined && {image}),
+        },
+        optimisticUpdater(store) {
+          const record = store.get(id);
+
+          record.setValue(displayName, 'displayName');
+
+          if (previewUrl !== undefined) {
+            record.setValue(previewUrl, 'imageUrl');
+          }
+        },
+        onCompleted() {
+          console.log('profile was updated');
+        },
+        onError() {
+          console.log('there was a problem while updating the profile');
+        },
+      });
+    },
+    [commit],
+  );
+
+  return [execute, isInFlight];
+};
+
+export default memo(function SettingsProfile({active, onChange, fragmentRef}) {
+  const data = useFragment(
+    graphql`
+      fragment SettingsProfileFragment_query on Query {
+        me {
+          id
+          name
+          displayName
+          imageUrl
+        }
+      }
+    `,
+    fragmentRef,
+  );
+  const me = data.me;
+
+  const [updateUserProfile] = useUpdateUserProfile();
+
+  const [[image, previewUrl], setAvatar] = useState([]);
+
+  const {getRootProps, getInputProps, open} = useDropzone({
+    accept: 'image/*',
+    multiple: false,
+    maxFiles: 1,
+    maxSize: 1_024_000,
+    onDropAccepted: ([file]) => {
+      console.log('image drop accepted');
+
+      setAvatar([file, URL.createObjectURL(file)]);
+    },
+    onDropRejected: (fileRejections) => {
+      console.log('image drop rejected', fileRejections);
+    },
+  });
+
+  const displaynameRef = useRef(null);
+
+  useEffect(() => {
+    if (previewUrl) {
+      return () => {
+        URL.revokeObjectURL(previewUrl);
+      };
+    }
+  }, [previewUrl]);
+
+  return (
+    <Group
+      id="profile"
+      icon={ProfileIcon}
+      title="Profile"
+      active={active}
+      disabled={!me}
+      onChange={onChange}
+    >
+      {me && (
+        <form
+          name="links"
+          onSubmit={(e) => {
+            e.preventDefault();
+
+            const displayName = displaynameRef.current?.value || null;
+
+            updateUserProfile({
+              id: me.id,
+              displayName,
+              image,
+              previewUrl,
+            });
+          }}
+        >
+          <AccordionDetails id="panel-profile-content" sx={{p: 6}}>
+            <Stack direction="column" alignItems="center" gap={8}>
+              <input {...getInputProps()} />
+              <Avatar
+                src={previewUrl === undefined ? me.imageUrl : previewUrl}
+                sx={(theme) => ({
+                  width: 192,
+                  height: 192,
+                  border: `1px solid ${theme.palette.action.focus}`,
+                  backgroundColor: theme.palette.action.focus,
+                  outline: 0,
+                  '&:hover': {
+                    borderColor: theme.palette.text.primary,
+                  },
+                  '&:focus': {
+                    borderWidth: 2,
+                    borderColor: theme.palette.primary.main,
+                  },
+                })}
+                {...getRootProps()}
+              />
+              <Stack direction="row">
+                <IconButton
+                  size="medium"
+                  aria-label="remove image"
+                  disabled={!previewUrl && !me.imageUrl}
+                  onClick={() => {
+                    setAvatar([null, null]);
+                  }}
+                >
+                  <DeleteIcon fontSize="inherit" />
+                </IconButton>
+                <IconButton
+                  size="medium"
+                  aria-label="upload image"
+                  onClick={open}
+                >
+                  <FileUploadIcon fontSize="inherit" />
+                </IconButton>
+              </Stack>
+              <TextField
+                inputRef={displaynameRef}
+                label="Displayname"
+                defaultValue={me.displayName}
+                autoComplete="displayname"
+                helperText="Your name may appear around where you contribute or are mentioned. You can remove it at any time."
+                fullWidth
+              />
+            </Stack>
+          </AccordionDetails>
+          <AccordionActions
+            sx={{flexDirection: 'row-reverse', justifyContent: 'flex-start'}}
+          >
+            <Button type="submit" color="primary">
+              Save
+            </Button>
+            <Button
+              type="reset"
+              color="secondary"
+              onClick={() => {
+                setAvatar([]);
+              }}
+            >
+              Cancel
+            </Button>
+          </AccordionActions>
+        </form>
+      )}
+    </Group>
+  );
+});
diff --git a/crypto/frontend/scenes/index.js b/crypto/frontend/scenes/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..30ebea7823f12836600b67b71d8f0805b5fa2a88
--- /dev/null
+++ b/crypto/frontend/scenes/index.js
@@ -0,0 +1,7 @@
+export * from './alerts';
+export * from './dashboard';
+export * from './notifications';
+export * from './screener';
+export * from './settings';
+export * from './viewer';
+export * from './watchlist';
diff --git a/crypto/frontend/scenes/watchlist/WatchlistList.js b/crypto/frontend/scenes/watchlist/WatchlistList.js
new file mode 100644
index 0000000000000000000000000000000000000000..07cf190c9b6fef3ea6b2e4152dd9c9785c2f027c
--- /dev/null
+++ b/crypto/frontend/scenes/watchlist/WatchlistList.js
@@ -0,0 +1,77 @@
+import {
+  Stack,
+  Table,
+  TableBody,
+  TableCell,
+  TableFooter,
+  TableRow,
+} from '@mui/material';
+import {memo} from 'react';
+import {graphql, usePaginationFragment} from 'react-relay';
+
+import {LoadMoreButton, NoData} from '@/components';
+import {useSize} from '@/hooks';
+
+import WatchlistListItem from './WatchlistListItem';
+
+export default memo(function WatchlistList({fragmentRef}) {
+  const {data, hasNext, loadNext, isLoadingNext} = usePaginationFragment(
+    graphql`
+      fragment WatchlistListFragment_query on Query
+      @argumentDefinitions(
+        cursor: {type: "String"}
+        count: {type: "Int", defaultValue: 10}
+      )
+      @refetchable(queryName: "WatchlistListRefetchableQuery") {
+        me {
+          watchlist {
+            assets(after: $cursor, first: $count)
+              @connection(key: "WatchlistList_assets") {
+              edges {
+                node {
+                  id
+                  isInWatchlist
+                  ...WatchlistListItemFragment_asset
+                }
+              }
+            }
+          }
+        }
+      }
+    `,
+    fragmentRef,
+  );
+  const assets = data.me?.watchlist?.assets?.edges;
+
+  const [tableRef, size] = useSize();
+  const extended = size?.width > 400;
+
+  return (
+    <Stack px={4}>
+      {assets?.length || hasNext ? (
+        <Table ref={tableRef} size="medium">
+          <TableBody>
+            {assets.map(({node}) => (
+              <WatchlistListItem
+                key={node.id}
+                fragmentRef={node}
+                extended={extended}
+              />
+            ))}
+          </TableBody>
+          {hasNext && (
+            <TableFooter>
+              <TableRow>
+                <TableCell colSpan={5} align="center">
+                  <LoadMoreButton busy={isLoadingNext} onClick={loadNext} />
+                </TableCell>
+              </TableRow>
+            </TableFooter>
+          )}
+        </Table>
+      ) : (
+        <NoData message="Your watchlist is empty." />
+      )}
+    </Stack>
+  );
+});
diff --git a/crypto/frontend/scenes/watchlist/WatchlistListItem.js b/crypto/frontend/scenes/watchlist/WatchlistListItem.js
new file mode 100644
index 0000000000000000000000000000000000000000..ce448cfb11131ce9610f881d43de53abb2bce848
--- /dev/null
+++ b/crypto/frontend/scenes/watchlist/WatchlistListItem.js
@@ -0,0 +1,184 @@
+import {
+  Checkbox,
+  Link,
+  Stack,
+  TableCell,
+  TableRow,
+  Typography,
+} from '@mui/material';
+import NextLink from 'next/link';
+import {memo, useCallback} from 'react';
+import {
+  ConnectionHandler,
+  graphql,
+  useFragment,
+  useMutation,
+} from 'react-relay';
+
+import {CryptoIcon, WatchIcon, WatchedIcon} from '@/icons';
+import {
+  direction,
+  formatCurrency,
+  formatCurrencyUsingCompactNotation,
+  formatPercent,
+} from '@/utils';
+
+const useRemoveFromWatchlist = () => {
+  const [commit, isInFlight] = useMutation(graphql`
+    mutation WatchlistListItemRAFWMutation(
+      $input: RemoveAssetFromWatchlistInput!
+    ) {
+      removeAssetFromWatchlist(input: $input) {
+        removedAsset {
+          isInWatchlist
+        }
+      }
+    }
+  `);
+
+  const execute = useCallback(
+    ({id, symbol}) => {
+      const updater = (store) => {
+        const asset = store.get(id);
+
+        if (asset) {
+          asset.setValue(false, 'isInWatchlist');
+        }
+
+        const me = store.getRoot().getLinkedRecord('me');
+
+        if (me) {
+          const watchlist = me.getLinkedRecord('watchlist');
+
+          if (watchlist) {
+            const assets = ConnectionHandler.getConnection(
+              watchlist,
+              'WatchlistList_assets',
+            );
+
+            if (assets) {
+              ConnectionHandler.deleteNode(assets, id);
+            }
+          }
+        }
+      };
+
+      commit({
+        variables: {input: {symbol}},
+        optimisticUpdater: updater,
+        updater,
+        onCompleted: () => {
+          console.log(`${symbol} was removed from the watchlist`);
+        },
+        onError: () => {
+          console.log(
+            `there was a problem with ${symbol} while removing from the watchlist`,
+          );
+        },
+      });
+    },
+    [commit],
+  );
+
+  return [execute, isInFlight];
+};
+
+export default memo(function WatchlistListItem({fragmentRef, extended}) {
+  const asset = useFragment(
+    graphql`
+      fragment WatchlistListItemFragment_asset on Asset {
+        id
+        symbol
+        name
+        imageUrl
+        isInWatchlist
+        price {
+          currency
+          lastPrice
+          change24Hour
+          marketCap
+        }
+      }
+    `,
+    fragmentRef,
+  );
+  const {price} = asset;
+
+  const [removeFromWatchlist] = useRemoveFromWatchlist();
+
+  const labelId = `row:${asset.symbol}`;
+
+  return (
+    <TableRow
+      key={asset.symbol}
+      role="checkbox"
+      aria-checked={!!asset.isInWatchlist}
+      tabIndex={-1}
+      hover
+    >
+      <TableCell component="th" scope="row" sx={{width: 'auto'}}>
+        <NextLink
+          href="/currencies/[symbol]"
+          as={`/currencies/${asset.symbol}`}
+          passHref
+        >
+          <Link underline="none">
+            <Stack direction="row" alignItems="center" gap={2}>
+              <CryptoIcon src={asset.imageUrl} alt={asset.name} size="medium" />
+              <Stack direction="column">
+                <Typography id={labelId} variant="caption">
+                  {asset.name}
+                </Typography>
+                <Typography variant="caption" color="text.secondary">
+                  {asset.symbol}
+                </Typography>
+              </Stack>
+            </Stack>
+          </Link>
+        </NextLink>
+      </TableCell>
+      <TableCell
+        align="right"
+        sx={{width: 100, paddingLeft: 0, fontWeight: 600}}
+      >
+        {price && formatCurrency(price.lastPrice, {currency: price.currency})}
+      </TableCell>
+      <TableCell
+        align="right"
+        sx={(theme) => ({
+          width: 70,
+          paddingLeft: 0,
+          color: theme.palette.trend[direction(price?.change24Hour)],
+        })}
+      >
+        {price && formatPercent(price.change24Hour)}
+      </TableCell>
+      {extended && (
+        <TableCell align="right" sx={{width: 70, paddingLeft: 0}}>
+          {price &&
+            formatCurrencyUsingCompactNotation(price.marketCap, {
+              currency: price.currency,
+            })}
+        </TableCell>
+      )}
+      <TableCell align="right" sx={{width: 46, paddingLeft: 0}}>
+        <Checkbox
+          color="primary"
+          icon={<WatchIcon />}
+          checkedIcon={<WatchedIcon />}
+          checked={!!asset.isInWatchlist}
+          disabled={asset.isInWatchlist === null}
+          size="small"
+          inputProps={{
+            'aria-labelledby': labelId,
+          }}
+          onChange={(event) => {
+            if (!event.target.checked) {
+              removeFromWatchlist(asset);
+            }
+          }}
+        />
+      </TableCell>
+    </TableRow>
+  );
+});
diff --git a/crypto/frontend/client/index.js b/crypto/frontend/client/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..ba7f1d72553d0d6282bda51657fa7260a2aa6322
--- /dev/null
+++ b/crypto/frontend/client/index.js
@@ -0,0 +1,286 @@
+import extractFiles from 'extract-files/extractFiles.mjs';
+import isExtractableFile from 'extract-files/isExtractableFile.mjs';
+import {createClient} from 'graphql-ws';
+import {meros} from 'meros/browser';
+import {useMemo} from 'react';
+import {
+  Environment,
+  Network,
+  Observable,
+  RecordSource,
+  Store,
+} from 'relay-runtime';
+
+import {Config} from '@/config';
+import {isAsyncIterable, merge, pause} from '@/utils';
+
+let relayEnvironment;
+
+const ErrorMessages = {
+  FAILED_FETCH: 'Failed to fetch',
+  ERROR_FETCH: 'Error in fetch',
+  UNWORKABLE_FETCH: 'Unworkable fetch',
+  SOCKET_CLOSED: 'Socket closed',
+  GRAPHQL_ERRORS: 'GraphQL error',
+};
+
+class NetworkError extends Error {
+  constructor(message, options) {
+    super(message, options);
+
+    this.name = 'NetworkError';
+
+    if (options) {
+      const {cause, ...meta} = options;
+
+      Object.assign(this, meta);
+    }
+  }
+}
+
+const fetchFn = (operation, variables, cacheConfig, uploadables) => {
+  const httpEndpoint = Config.HTTP_ENDPOINT;
+  const authToken = Config.AUTH_TOKEN;
+
+  return Observable.create((sink) => {
+    const init = {
+      method: 'POST',
+      headers: {
+        Accept: 'application/json',
+        Authorization: authToken ? `basic ${authToken}` : undefined,
+      },
+    };
+
+    const {clone, files} = extractFiles(
+      {
+        id: operation.id ?? undefined,
+        query: operation.text ?? undefined,
+        variables,
+      },
+      isExtractableFile,
+    );
+
+    if (files.size) {
+      const form = new FormData();
+
+      form.set('operations', JSON.stringify(clone));
+
+      const map = {};
+      let i = 0;
+
+      files.forEach((paths) => {
+        map[i++] = paths;
+      });
+
+      form.set('map', JSON.stringify(map));
+
+      i = 0;
+      files.forEach((paths, file) => {
+        form.set(`${i++}`, file, file.name);
+      });
+
+      merge(init, {
+        body: form,
+      });
+    } else {
+      merge(init, {
+        headers: {
+          'Content-Type': 'application/json',
+        },
+        body: JSON.stringify(clone),
+      });
+    }
+
+    (async () => {
+      const request = new Request(httpEndpoint, init);
+
+      try {
+        const response = await fetch(request);
+
+        // Status code in range 200-299 inclusive (2xx).
+        if (response.ok) {
+          try {
+            const parts = await meros(response);
+
+            if (isAsyncIterable(parts)) {
+              for await (const part of parts) {
+                if (!part.json) {
+                  sink.error(
+                    new NetworkError(ErrorMessages.UNWORKABLE_FETCH, {
+                      request,
+                      response,
+                    }),
+                  );
+                  break;
+                }
+
+                // If any exceptions occurred when processing the request,
+                // throw an error to indicate to the developer what went wrong.
+                if (Array.isArray(part.body.errors)) {
+                  sink.error(
+                    new NetworkError(ErrorMessages.GRAPHQL_ERRORS, {
+                      request,
+                      response,
+                    }),
+                  );
+                  break;
+                }
+
+                // DEMO: delay chunked responses
+                // await pause(2_000);
+
+                // HACK: if `label` is present, also `path` is required, remove once fixed in HC
+                // @see https://github.com/maraisr/meros/issues/15#issuecomment-1054268416
+                if (part.body.label && !part.body.path) {
+                  part.body.path = [];
+                }
+
+                sink.next(part.body);
+              }
+            } else {
+              const json = await response.json();
+
+              // If any exceptions occurred when processing the request,
+              // throw an error to indicate to the developer what went wrong.
+              if (Array.isArray(json.errors)) {
+                sink.error(
+                  new NetworkError(ErrorMessages.GRAPHQL_ERRORS, {
+                    request,
+                    response,
+                  }),
+                );
+              } else {
+                // DEMO: delay response
+                // await pause(2_000);
+
+                sink.next(json);
+              }
+            }
+
+            sink.complete();
+          } catch (err) {
+            sink.error(
+              new NetworkError(ErrorMessages.UNWORKABLE_FETCH, {
+                cause: err,
+                request,
+                response,
+              }),
+              true,
+            );
+          }
+        } else {
+          sink.error(
+            new NetworkError(ErrorMessages.ERROR_FETCH, {request, response}),
+          );
+        }
+      } catch (err) {
+        sink.error(
+          new NetworkError(ErrorMessages.FAILED_FETCH, {cause: err, request}),
+          true,
+        );
+      }
+    })();
+  });
+};
+
+let wsClient;
+
+/**
+ * With `graphql-ws`.
+ * @see https://github.com/enisdenjo/graphql-ws
+ */
+const subscribeFn = (operation, variables) => {
+  const wsEndpoint = Config.WS_ENDPOINT;
+  const authToken = Config.AUTH_TOKEN;
+
+  const client = (wsClient ??= createClient({
+    url: wsEndpoint,
+    connectionParams: {
+      Authorization: authToken ? `basic ${authToken}` : undefined,
+    },
+  }));
+
+  return Observable.create((sink) =>
+    client.subscribe(
+      {
+        id: operation.id ?? undefined,
+        query: operation.text,
+        variables,
+      },
+      {
+        ...sink,
+        error: (err) => {
+          if (Array.isArray(err)) {
+            return sink.error(
+              new NetworkError(ErrorMessages.ERROR_FETCH, {cause: err}),
+            );
+          }
+
+          if (err instanceof CloseEvent) {
+            return sink.error(
+              new NetworkError(ErrorMessages.SOCKET_CLOSED, {cause: err}),
+            );
+          }
+
+          return sink.error(err, true);
+        },
+      },
+    ),
+  );
+};
+
+const createEnvironment = (initialRecords) => {
+  const source = new RecordSource(initialRecords);
+
+  /**
+   * Presence of Data
+   * @see https://relay.dev/docs/guided-tour/reusing-cached-data/presence-of-data/
+   *
+   * - Note that having a buffer size of 0 is equivalent to not having the release buffer, which means that queries will be immediately released and collected.
+   * - By default, environments have a release buffer size of 10.
+   *
+   * @example
+   * // last 10 queries
+   * gcReleaseBufferSize: 10,
+   *
+   *
+   * Staleness of Data
+   * @see https://relay.dev/docs/guided-tour/reusing-cached-data/staleness-of-data/
+   *
+   * - If the query cache expiration time is not provided, staleness checks only look at whether the referenced records have been invalidated.
+   *
+   * @example
+   * // 1 min
+   * queryCacheExpirationTime: 60 * 1_000,
+   */
+  const options = {};
+
+  const store = new Store(source, options);
+
+  const network = Network.create(fetchFn, subscribeFn);
+
+  return new Environment({
+    network,
+    store,
+  });
+};
+
+export const initEnvironment = (initialRecords) => {
+  // Create a network layer from the fetch function
+  const environment = relayEnvironment ?? createEnvironment(initialRecords);
+
+  // If your page has Next.js data fetching methods that use Relay, the initial records
+  // will get hydrated here
+  if (initialRecords) {
+    environment.getStore().publish(new RecordSource(initialRecords));
+  }
+  // For SSG and SSR always create a new Relay environment
+  if (typeof window === 'undefined') return environment;
+  // Create the Relay environment once in the client
+  if (!relayEnvironment) relayEnvironment = environment;
+
+  return relayEnvironment;
+};
+
+export const useEnvironment = (initialRecords) =>
+  useMemo(() => initEnvironment(initialRecords), [initialRecords]);
diff --git a/crypto/frontend/pages/screener.js b/crypto/frontend/pages/screener.js
new file mode 100644
index 0000000000000000000000000000000000000000..989abd76b6c37b827054f5f533900ccff7aa21d3
--- /dev/null
+++ b/crypto/frontend/pages/screener.js
@@ -0,0 +1 @@
+export {Screener as default} from '@/scenes';
diff --git a/crypto/frontend/scenes/settings/SettingsContainer.js b/crypto/frontend/scenes/settings/SettingsContainer.js
new file mode 100644
index 0000000000000000000000000000000000000000..0aaf8535e57544d4c3a176a64c43248195bce3f7
--- /dev/null
+++ b/crypto/frontend/scenes/settings/SettingsContainer.js
@@ -0,0 +1,33 @@
+import {memo} from 'react';
+import {useState} from 'react';
+import {graphql, useLazyLoadQuery} from 'react-relay';
+
+import SettingsCredentials from './SettingsCredentials';
+import SettingsLinks from './SettingsLinks';
+import SettingsProfile from './SettingsProfile';
+
+export default memo(function SettingsContainer({cacheBuster}) {
+  const data = useLazyLoadQuery(
+    graphql`
+      query SettingsContainerQuery {
+        ...SettingsProfileFragment_query
+      }
+    `,
+    {},
+    {fetchKey: cacheBuster},
+  );
+
+  const [active, setActive] = useState('profile');
+
+  return (
+    <>
+      <SettingsLinks active={active} onChange={setActive} />
+      <SettingsCredentials active={active} onChange={setActive} />
+      <SettingsProfile
+        fragmentRef={data}
+        active={active}
+        onChange={setActive}
+      />
+    </>
+  );
+});
diff --git a/crypto/frontend/scenes/dashboard/DashboardFeatured.js b/crypto/frontend/scenes/dashboard/DashboardFeatured.js
new file mode 100644
index 0000000000000000000000000000000000000000..209b1a08a7dbbab3f12c28c9cee9df9bab608f47
--- /dev/null
+++ b/crypto/frontend/scenes/dashboard/DashboardFeatured.js
@@ -0,0 +1,33 @@
+import {memo} from 'react';
+import {graphql, useFragment} from 'react-relay';
+
+import {Carousel} from '@/components';
+
+import DashboardFeaturedCard from './DashboardFeaturedCard';
+
+export default memo(function DashboardFeatured({fragmentRef}) {
+  const data = useFragment(
+    graphql`
+      fragment DashboardFeaturedFragment_query on Query {
+        featured: assets(where: {symbol: {in: ["BTC", "ADA", "ALGO"]}}) {
+          nodes {
+            id
+            ...DashboardFeaturedCardFragment_asset
+          }
+        }
+      }
+    `,
+    fragmentRef,
+  );
+  const assets = data.featured?.nodes;
+
+  return (
+    !!assets?.length && (
+      <Carousel py={4}>
+        {assets.map((node) => (
+          <DashboardFeaturedCard key={node.id} fragmentRef={node} />
+        ))}
+      </Carousel>
+    )
+  );
+});
diff --git a/crypto/frontend/scenes/viewer/ViewerResources.js b/crypto/frontend/scenes/viewer/ViewerResources.js
new file mode 100644
index 0000000000000000000000000000000000000000..7c87e7432801712a3ed743d8e1a62c5e7470d4e7
--- /dev/null
+++ b/crypto/frontend/scenes/viewer/ViewerResources.js
@@ -0,0 +1,66 @@
+import styled from '@emotion/styled';
+import {Box, Link, Stack, Typography} from '@mui/material';
+import {memo} from 'react';
+import {graphql, useFragment} from 'react-relay';
+
+import {WebsiteIcon, WhitepaperIcon} from '@/icons';
+
+const $Link = styled(Link)(
+  ({theme}) => `
+  margin-right: auto;
+  display: flex;
+  align-items: center;
+  gap: ${theme.spacing(2)};
+
+  .MuiSvgIcon-root {
+    fill: ${theme.palette.text.secondary};
+  }
+`,
+);
+
+export default memo(function ViewerResources({fragmentRef}) {
+  const asset = useFragment(
+    graphql`
+      fragment ViewerResourcesFragment_asset on Asset {
+        website
+        whitePaper
+      }
+    `,
+    fragmentRef,
+  );
+
+  return (
+    <Stack p={2}>
+      <Typography variant="h3" gutterBottom>
+        Resources
+      </Typography>
+      <Box sx={{display: 'flex', flexDirection: 'column', py: 1, px: 2}}>
+        {asset.whitePaper && (
+          <$Link
+            href={asset.whitePaper}
+            target="_blank"
+            rel="noopener"
+            variant="body2"
+            underline="none"
+            gutterBottom
+          >
+            <WhitepaperIcon fontSize="small" />
+            Whitepaper
+          </$Link>
+        )}
+        {asset.website && (
+          <$Link
+            href={asset.website}
+            target="_blank"
+            rel="noopener"
+            variant="body2"
+            underline="none"
+          >
+            <WebsiteIcon fontSize="small" />
+            Official website
+          </$Link>
+        )}
+      </Box>
+    </Stack>
+  );
+});
diff --git a/crypto/frontend/pages/settings.js b/crypto/frontend/pages/settings.js
new file mode 100644
index 0000000000000000000000000000000000000000..09b0180341866eebce62d54a8c9e5f309e7e2426
--- /dev/null
+++ b/crypto/frontend/pages/settings.js
@@ -0,0 +1 @@
+export {Settings as default} from '@/scenes';
