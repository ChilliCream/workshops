schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]!
  me: User
  assets("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: AssetFilterInput order: [AssetSortInput!]): AssetsConnection
  assetBySlug(slug: String!): Asset
  assetsBySlug(slugs: [String!]!): [Asset]!
  assetBySymbol(symbol: String!): Asset
  assetsBySymbol(symbols: [String!]!): [Asset]!
  assetById(id: ID!): Asset
  assetsById(ids: [ID!]!): [Asset]!
}

type Mutation {
  updateUserProfile(input: UpdateUserProfileInput!): UpdateUserProfilePayload!
  addAssetToWatchlist(input: AddAssetToWatchlistInput!): AddAssetToWatchlistPayload!
  addAssetsToWatchlist(input: AddAssetsToWatchlistInput!): AddAssetsToWatchlistPayload!
  removeAssetFromWatchlist(input: RemoveAssetFromWatchlistInput!): RemoveAssetFromWatchlistPayload!
  removeAssetsFromWatchlist(input: RemoveAssetsFromWatchlistInput!): RemoveAssetsFromWatchlistPayload!
  changeAssetPositionInWatchlist(input: ChangeAssetPositionInWatchlistInput!): ChangeAssetPositionInWatchlistPayload!
  createAlert(input: CreateAlertInput!): CreateAlertPayload!
  deleteAlert(input: DeleteAlertInput!): DeleteAlertPayload!
  markNotificationRead(input: MarkNotificationReadInput!): MarkNotificationReadPayload!
  markNotificationsRead(input: MarkNotificationsReadInput!): MarkNotificationsReadPayload!
  deleteNotification(input: DeleteNotificationInput!): DeleteNotificationPayload!
  deleteNotifications(input: DeleteNotificationsInput!): DeleteNotificationsPayload!
}

type Subscription {
  onPriceChange(symbols: [String!]): AssetPrice!
  onNotification: NotificationUpdate!
}

input AssetFilterInput {
  and: [AssetFilterInput!]
  or: [AssetFilterInput!]
  symbol: StringOperationFilterInput
  slug: StringOperationFilterInput
  name: StringOperationFilterInput
  price: AssetPriceFilterInput
}

type AssetPriceChange {
  id: ID!
  percentageChange: Float!
  history("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): HistoryConnection
}

type AssetPriceHistory {
  epoch: Int!
  price: Float!
}

input AssetSortInput {
  symbol: SortEnumType
  slug: SortEnumType
  name: SortEnumType
  price: AssetPriceSortInput
}

"The `Upload` scalar type represents a file upload."
scalar Upload

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input AssetPriceFilterInput {
  and: [AssetPriceFilterInput!]
  or: [AssetPriceFilterInput!]
  id: IntOperationFilterInput
  symbol: StringOperationFilterInput
  currency: StringOperationFilterInput
  lastPrice: FloatOperationFilterInput
  marketCap: FloatOperationFilterInput
  tradableMarketCapRank: FloatOperationFilterInput
  volume24Hour: FloatOperationFilterInput
  volumePercentChange24Hour: FloatOperationFilterInput
  circulatingSupply: FloatOperationFilterInput
  maxSupply: FloatOperationFilterInput
  high24Hour: FloatOperationFilterInput
  low24Hour: FloatOperationFilterInput
  open24Hour: FloatOperationFilterInput
  tradingActivity: FloatOperationFilterInput
  change24Hour: FloatOperationFilterInput
  assetId: IntOperationFilterInput
  modifiedAt: DateTimeOperationFilterInput
  asset: AssetFilterInput
}

"A connection to a list of items."
type HistoryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [HistoryEdge!]
  "A flattened list of the nodes."
  nodes: [AssetPriceHistory]
}

enum SortEnumType {
  ASC
  DESC
}

input AssetPriceSortInput {
  id: SortEnumType
  symbol: SortEnumType
  currency: SortEnumType
  lastPrice: SortEnumType
  marketCap: SortEnumType
  tradableMarketCapRank: SortEnumType
  volume24Hour: SortEnumType
  volumePercentChange24Hour: SortEnumType
  circulatingSupply: SortEnumType
  maxSupply: SortEnumType
  high24Hour: SortEnumType
  low24Hour: SortEnumType
  open24Hour: SortEnumType
  tradingActivity: SortEnumType
  change24Hour: SortEnumType
  assetId: SortEnumType
  modifiedAt: SortEnumType
  asset: AssetSortInput
}

input IntOperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input FloatOperationFilterInput {
  eq: Float
  neq: Float
  in: [Float]
  nin: [Float]
  gt: Float
  ngt: Float
  gte: Float
  ngte: Float
  lt: Float
  nlt: Float
  lte: Float
  nlte: Float
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

"The multiplier path scalar represents a valid GraphQL multiplier path string."
scalar MultiplierPath

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"An edge in a connection."
type HistoryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: AssetPriceHistory
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime

"A connection to a list of items."
type UserAlertConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UserAlertEdge!]
  "A flattened list of the nodes."
  nodes: [Alert!]
}

"A connection to a list of items."
type NotificationsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [NotificationsEdge!]
  "A flattened list of the nodes."
  nodes: [Notification!]
  "Identifies the total count of items in the connection."
  totalCount: Int!
}

type UnknownAssetError implements Error {
  message: String!
  symbols: [String!]!
}

type NotAuthenticatedError implements Error {
  message: String!
}

type UnknownWatchlistError implements Error {
  message: String!
  username: String!
}

type IndexOutOfRangeError implements Error {
  message: String!
}

"A connection to a list of items."
type AssetsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AssetsEdge!]
  "A flattened list of the nodes."
  nodes: [Asset!]
}

type InvalidTargetPriceError implements Error {
  message: String!
  targetPrice: Float!
}

type UnknownCurrencyError implements Error {
  message: String!
  currency: String!
}

type EntityNotFoundError implements Error {
  message: String!
  id: Int!
}

type UnknownNotificationError implements Error {
  message: String!
  notificationIds: [Int!]!
}

type Alert implements Node {
  id: ID!
  username: String!
  percentageChange: Float!
  currency: String!
  targetPrice: Float!
  recurring: Boolean!
  asset: Asset!
}

"An edge in a connection."
type UserAlertEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Alert!
}

type Notification implements Node {
  id: ID!
  username: String!
  message: String
  read: Boolean!
  asset: Asset!
}

"An edge in a connection."
type NotificationsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Notification!
}

interface Error {
  message: String!
}

type Asset implements Node {
  id: ID!
  symbol: String!
  name: String!
  slug: String!
  description: String
  color: String!
  website: String
  whitePaper: String
  price: AssetPrice!
  alerts: [Alert!]!
  imageUrl: String
  isInWatchlist: Boolean
}

"An edge in a connection."
type AssetsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Asset!
}

input CreateAlertInput {
  symbol: String!
  targetPrice: Float!
  currency: String = "USD"
  recurring: Boolean! = false
}

enum ChangeSpan {
  ALL
  HOUR
  DAY
  WEEK
  MONTH
  YEAR
}

type AssetPrice implements Node {
  id: ID!
  symbol: String!
  currency: String!
  lastPrice: Float!
  marketCap: Float!
  tradableMarketCapRank: Float!
  volume24Hour: Float!
  volumePercentChange24Hour: Float!
  circulatingSupply: Float!
  maxSupply: Float!
  high24Hour: Float!
  low24Hour: Float!
  open24Hour: Float!
  tradingActivity: Float!
  change24Hour: Float!
  modifiedAt: DateTime
  asset: Asset!
  change(span: ChangeSpan!): AssetPriceChange
}

type RemoveAssetsFromWatchlistPayload {
  removedAssets("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): RemovedAssetsConnection
  watchlist: Watchlist
}

type RemoveAssetFromWatchlistPayload {
  removedAsset: Asset
  watchlist: Watchlist
}

type AddAssetsToWatchlistPayload {
  addedAssets("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): AddedAssetsConnection
  watchlist: Watchlist
}

type AddAssetToWatchlistPayload {
  addedAsset: Asset
  watchlist: Watchlist
}

enum ReadStatus {
  ALL
  READ
  UNREAD
}

type Watchlist implements Node {
  id: ID!
  user: User!
  assets("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): AssetsConnection
}

input UpdateUserProfileInput {
  displayName: String
  image: Upload
}

type User {
  name: String!
  displayName: String
  id: ID!
  watchlist: Watchlist
  alerts("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): UserAlertConnection
  notifications(status: ReadStatus! = ALL "Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String): NotificationsConnection
  imageUrl: String
}

type NotificationUpdate {
  notification: Notification
  unreadNotifications: Int!
}

"A connection to a list of items."
type RemovedAssetsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [RemovedAssetsEdge!]
  "A flattened list of the nodes."
  nodes: [Asset!]
}

"A connection to a list of items."
type AddedAssetsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AddedAssetsEdge!]
  "A flattened list of the nodes."
  nodes: [Asset!]
}

"An edge in a connection."
type RemovedAssetsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Asset!
}

"An edge in a connection."
type AddedAssetsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Asset!
}

type UpdateUserProfilePayload {
  updatedUser: User
}

input AddAssetToWatchlistInput {
  symbol: String!
}

input AddAssetsToWatchlistInput {
  symbols: [String!]!
}

input RemoveAssetFromWatchlistInput {
  symbol: String!
}

input RemoveAssetsFromWatchlistInput {
  symbols: [String!]!
}

input ChangeAssetPositionInWatchlistInput {
  symbol: String!
  index: Int!
}

union ChangeAssetPositionInWatchlistError = UnknownAssetError | NotAuthenticatedError | UnknownWatchlistError | IndexOutOfRangeError

type ChangeAssetPositionInWatchlistPayload {
  watchlist: Watchlist
  errors: [ChangeAssetPositionInWatchlistError!]
}

union CreateAlertError = InvalidTargetPriceError | UnknownCurrencyError

type CreateAlertPayload {
  createdAlert: Alert
  errors: [CreateAlertError!]
}

input DeleteAlertInput {
  alertId: ID!
}

union DeleteAlertError = EntityNotFoundError

type DeleteAlertPayload {
  deletedAlert: Alert
  errors: [DeleteAlertError!]
}

input MarkNotificationReadInput {
  notificationId: ID!
}

union MarkNotificationReadError = UnknownNotificationError

type MarkNotificationReadPayload {
  readNotification: Notification
  errors: [MarkNotificationReadError!]
}

input MarkNotificationsReadInput {
  notificationIds: [ID!]!
}

union MarkNotificationsReadError = UnknownNotificationError

type MarkNotificationsReadPayload {
  readNotifications: [Notification!]
  errors: [MarkNotificationsReadError!]
}

input DeleteNotificationInput {
  notificationId: ID!
}

union DeleteNotificationError = UnknownNotificationError

type DeleteNotificationPayload {
  deletedNotification: Notification
  errors: [DeleteNotificationError!]
}

input DeleteNotificationsInput {
  notificationIds: [ID!]!
}

union DeleteNotificationsError = UnknownNotificationError

type DeleteNotificationsPayload {
  deletedNotifications: [Notification!]
  errors: [DeleteNotificationsError!]
}

"The cost directives is used to express the complexity of a field."
directive @cost("Defines the complexity of the field." complexity: Int! = 1 "Defines field arguments that act as complexity multipliers." multipliers: [MultiplierPath!] defaultMultiplier: Int) on FIELD_DEFINITION