// <auto-generated/>
#nullable enable

namespace DemoMaui.GraphQL
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class GetAssetsResult : global::System.IEquatable<GetAssetsResult>, IGetAssetsResult
    {
        public GetAssetsResult(global::DemoMaui.GraphQL.IGetAssets_Assets? assets)
        {
            Assets = assets;
        }

        public global::DemoMaui.GraphQL.IGetAssets_Assets? Assets { get; }

        public virtual global::System.Boolean Equals(GetAssetsResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Assets is null && other.Assets is null) || Assets != null && Assets.Equals(other.Assets)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAssetsResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Assets != null)
                {
                    hash ^= 397 * Assets.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class GetAssets_Assets_AssetsConnection : global::System.IEquatable<GetAssets_Assets_AssetsConnection>, IGetAssets_Assets_AssetsConnection
    {
        public GetAssets_Assets_AssetsConnection(global::System.Collections.Generic.IReadOnlyList<global::DemoMaui.GraphQL.IGetAssets_Assets_Nodes>? nodes, global::DemoMaui.GraphQL.IGetAssets_Assets_PageInfo pageInfo)
        {
            Nodes = nodes;
            PageInfo = pageInfo;
        }

        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::DemoMaui.GraphQL.IGetAssets_Assets_Nodes>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::DemoMaui.GraphQL.IGetAssets_Assets_PageInfo PageInfo { get; }

        public virtual global::System.Boolean Equals(GetAssets_Assets_AssetsConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes)) && PageInfo.Equals(other.PageInfo);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAssets_Assets_AssetsConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        hash ^= 397 * Nodes_elm.GetHashCode();
                    }
                }

                hash ^= 397 * PageInfo.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class GetAssets_Assets_Nodes_Asset : global::System.IEquatable<GetAssets_Assets_Nodes_Asset>, IGetAssets_Assets_Nodes_Asset
    {
        public GetAssets_Assets_Nodes_Asset(global::System.String symbol, global::System.String name, global::DemoMaui.GraphQL.IGetAssets_Assets_Nodes_Price price)
        {
            Symbol = symbol;
            Name = name;
            Price = price;
        }

        public global::System.String Symbol { get; }

        public global::System.String Name { get; }

        public global::DemoMaui.GraphQL.IGetAssets_Assets_Nodes_Price Price { get; }

        public virtual global::System.Boolean Equals(GetAssets_Assets_Nodes_Asset? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Symbol.Equals(other.Symbol)) && Name.Equals(other.Name) && Price.Equals(other.Price);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAssets_Assets_Nodes_Asset)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Symbol.GetHashCode();
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Price.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class GetAssets_Assets_PageInfo_PageInfo : global::System.IEquatable<GetAssets_Assets_PageInfo_PageInfo>, IGetAssets_Assets_PageInfo_PageInfo
    {
        public GetAssets_Assets_PageInfo_PageInfo(global::System.String? endCursor)
        {
            EndCursor = endCursor;
        }

        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }

        public virtual global::System.Boolean Equals(GetAssets_Assets_PageInfo_PageInfo? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((EndCursor is null && other.EndCursor is null) || EndCursor != null && EndCursor.Equals(other.EndCursor)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAssets_Assets_PageInfo_PageInfo)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (EndCursor != null)
                {
                    hash ^= 397 * EndCursor.GetHashCode();
                }

                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class GetAssets_Assets_Nodes_Price_AssetPrice : global::System.IEquatable<GetAssets_Assets_Nodes_Price_AssetPrice>, IGetAssets_Assets_Nodes_Price_AssetPrice
    {
        public GetAssets_Assets_Nodes_Price_AssetPrice(global::System.Double lastPrice)
        {
            LastPrice = lastPrice;
        }

        public global::System.Double LastPrice { get; }

        public virtual global::System.Boolean Equals(GetAssets_Assets_Nodes_Price_AssetPrice? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (LastPrice == other.LastPrice);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAssets_Assets_Nodes_Price_AssetPrice)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * LastPrice.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial interface IGetAssetsResult
    {
        public global::DemoMaui.GraphQL.IGetAssets_Assets? Assets { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial interface IGetAssets_Assets
    {
        /// <summary>
        /// A flattened list of the nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::DemoMaui.GraphQL.IGetAssets_Assets_Nodes>? Nodes { get; }

        /// <summary>
        /// Information to aid in pagination.
        /// </summary>
        public global::DemoMaui.GraphQL.IGetAssets_Assets_PageInfo PageInfo { get; }
    }

    /// <summary>
    /// A connection to a list of items.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial interface IGetAssets_Assets_AssetsConnection : IGetAssets_Assets
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial interface IAssetInfo
    {
        public global::System.String Symbol { get; }

        public global::System.String Name { get; }

        public global::DemoMaui.GraphQL.IGetAssets_Assets_Nodes_Price Price { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial interface IGetAssets_Assets_Nodes : IAssetInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial interface IGetAssets_Assets_Nodes_Asset : IGetAssets_Assets_Nodes
    {
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial interface IGetAssets_Assets_PageInfo
    {
        /// <summary>
        /// When paginating forwards, the cursor to continue.
        /// </summary>
        public global::System.String? EndCursor { get; }
    }

    /// <summary>
    /// Information about pagination in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial interface IGetAssets_Assets_PageInfo_PageInfo : IGetAssets_Assets_PageInfo
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial interface IGetAssets_Assets_Nodes_Price
    {
        public global::System.Double LastPrice { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial interface IGetAssets_Assets_Nodes_Price_AssetPrice : IGetAssets_Assets_Nodes_Price
    {
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class OnPriceChangeResult : global::System.IEquatable<OnPriceChangeResult>, IOnPriceChangeResult
    {
        public OnPriceChangeResult(global::DemoMaui.GraphQL.IOnPriceChange_OnPriceChange onPriceChange)
        {
            OnPriceChange = onPriceChange;
        }

        public global::DemoMaui.GraphQL.IOnPriceChange_OnPriceChange OnPriceChange { get; }

        public virtual global::System.Boolean Equals(OnPriceChangeResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (OnPriceChange.Equals(other.OnPriceChange));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnPriceChangeResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * OnPriceChange.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class OnPriceChange_OnPriceChange_AssetPrice : global::System.IEquatable<OnPriceChange_OnPriceChange_AssetPrice>, IOnPriceChange_OnPriceChange_AssetPrice
    {
        public OnPriceChange_OnPriceChange_AssetPrice(global::System.Double lastPrice)
        {
            LastPrice = lastPrice;
        }

        public global::System.Double LastPrice { get; }

        public virtual global::System.Boolean Equals(OnPriceChange_OnPriceChange_AssetPrice? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (LastPrice == other.LastPrice);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((OnPriceChange_OnPriceChange_AssetPrice)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * LastPrice.GetHashCode();
                return hash;
            }
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial interface IOnPriceChangeResult
    {
        public global::DemoMaui.GraphQL.IOnPriceChange_OnPriceChange OnPriceChange { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial interface IOnPriceChange_OnPriceChange
    {
        public global::System.Double LastPrice { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial interface IOnPriceChange_OnPriceChange_AssetPrice : IOnPriceChange_OnPriceChange
    {
    }

    /// <summary>
    /// Represents the operation service of the GetAssets GraphQL operation
    /// <code>
    /// query GetAssets($after: String) {
    ///   assets(after: $after) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... AssetInfo
    ///       ... on Asset {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment AssetInfo on Asset {
    ///   symbol
    ///   name
    ///   price {
    ///     __typename
    ///     lastPrice
    ///     ... on AssetPrice {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class GetAssetsQueryDocument : global::StrawberryShake.IDocument
    {
        private GetAssetsQueryDocument()
        {
        }

        public static GetAssetsQueryDocument Instance { get; } = new GetAssetsQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x41, 0x73, 0x73, 0x65, 0x74, 0x73, 0x28, 0x24, 0x61, 0x66, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x20, 0x7b, 0x20, 0x61, 0x73, 0x73, 0x65, 0x74, 0x73, 0x28, 0x61, 0x66, 0x74, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x61, 0x66, 0x74, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x73, 0x73, 0x65, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x61, 0x67, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x66, 0x72, 0x61, 0x67, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x41, 0x73, 0x73, 0x65, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x73, 0x73, 0x65, 0x74, 0x20, 0x7b, 0x20, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x70, 0x72, 0x69, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "dd6638ee7bc79bc334c5167906078dae");
        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAssets GraphQL operation
    /// <code>
    /// query GetAssets($after: String) {
    ///   assets(after: $after) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... AssetInfo
    ///       ... on Asset {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment AssetInfo on Asset {
    ///   symbol
    ///   name
    ///   price {
    ///     __typename
    ///     lastPrice
    ///     ... on AssetPrice {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class GetAssetsQuery : global::DemoMaui.GraphQL.IGetAssetsQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAssetsResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetAssetsQuery(global::StrawberryShake.IOperationExecutor<IGetAssetsResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAssetsResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAssetsResult>> ExecuteAsync(global::System.String? after, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(after);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAssetsResult>> Watch(global::System.String? after, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(after);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String? after)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("after", FormatAfter(after));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAssetsQueryDocument.Instance.Hash.Value, name: "GetAssets", document: GetAssetsQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatAfter(global::System.String? value)
        {
            if (value is null)
            {
                return value;
            }
            else
            {
                return _stringFormatter.Format(value);
            }
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAssets GraphQL operation
    /// <code>
    /// query GetAssets($after: String) {
    ///   assets(after: $after) {
    ///     __typename
    ///     nodes {
    ///       __typename
    ///       ... AssetInfo
    ///       ... on Asset {
    ///         id
    ///       }
    ///     }
    ///     pageInfo {
    ///       __typename
    ///       endCursor
    ///     }
    ///   }
    /// }
    /// 
    /// fragment AssetInfo on Asset {
    ///   symbol
    ///   name
    ///   price {
    ///     __typename
    ///     lastPrice
    ///     ... on AssetPrice {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial interface IGetAssetsQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAssetsResult>> ExecuteAsync(global::System.String? after, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAssetsResult>> Watch(global::System.String? after, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the OnPriceChange GraphQL operation
    /// <code>
    /// subscription OnPriceChange {
    ///   onPriceChange {
    ///     __typename
    ///     lastPrice
    ///     ... on AssetPrice {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class OnPriceChangeSubscriptionDocument : global::StrawberryShake.IDocument
    {
        private OnPriceChangeSubscriptionDocument()
        {
        }

        public static OnPriceChangeSubscriptionDocument Instance { get; } = new OnPriceChangeSubscriptionDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Subscription;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x4f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x7b, 0x20, 0x6f, 0x6e, 0x50, 0x72, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x73, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x41, 0x73, 0x73, 0x65, 0x74, 0x50, 0x72, 0x69, 0x63, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "3cb55d16f7825eef021d403798e7e2fe");
        public override global::System.String ToString()
        {
#if NETCOREAPP3_1_OR_GREATER
        return global::System.Text.Encoding.UTF8.GetString(Body);
#else
            return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the OnPriceChange GraphQL operation
    /// <code>
    /// subscription OnPriceChange {
    ///   onPriceChange {
    ///     __typename
    ///     lastPrice
    ///     ... on AssetPrice {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class OnPriceChangeSubscription : global::DemoMaui.GraphQL.IOnPriceChangeSubscription
    {
        private readonly global::StrawberryShake.IOperationExecutor<IOnPriceChangeResult> _operationExecutor;
        public OnPriceChangeSubscription(global::StrawberryShake.IOperationExecutor<IOnPriceChangeResult> operationExecutor)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IOnPriceChangeResult);
        public global::System.IObservable<global::StrawberryShake.IOperationResult<IOnPriceChangeResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest();
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest()
        {
            return CreateRequest(null);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: OnPriceChangeSubscriptionDocument.Instance.Hash.Value, name: "OnPriceChange", document: OnPriceChangeSubscriptionDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest();
        }
    }

    /// <summary>
    /// Represents the operation service of the OnPriceChange GraphQL operation
    /// <code>
    /// subscription OnPriceChange {
    ///   onPriceChange {
    ///     __typename
    ///     lastPrice
    ///     ... on AssetPrice {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial interface IOnPriceChangeSubscription : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.IObservable<global::StrawberryShake.IOperationResult<IOnPriceChangeResult>> Watch(global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the CryptoClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class CryptoClient : global::DemoMaui.GraphQL.ICryptoClient
    {
        private readonly global::DemoMaui.GraphQL.IGetAssetsQuery _getAssets;
        private readonly global::DemoMaui.GraphQL.IOnPriceChangeSubscription _onPriceChange;
        public CryptoClient(global::DemoMaui.GraphQL.IGetAssetsQuery getAssets, global::DemoMaui.GraphQL.IOnPriceChangeSubscription onPriceChange)
        {
            _getAssets = getAssets ?? throw new global::System.ArgumentNullException(nameof(getAssets));
            _onPriceChange = onPriceChange ?? throw new global::System.ArgumentNullException(nameof(onPriceChange));
        }

        public static global::System.String ClientName => "CryptoClient";
        public global::DemoMaui.GraphQL.IGetAssetsQuery GetAssets => _getAssets;
        public global::DemoMaui.GraphQL.IOnPriceChangeSubscription OnPriceChange => _onPriceChange;
    }

    /// <summary>
    /// Represents the CryptoClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial interface ICryptoClient
    {
        global::DemoMaui.GraphQL.IGetAssetsQuery GetAssets { get; }

        global::DemoMaui.GraphQL.IOnPriceChangeSubscription OnPriceChange { get; }
    }
}

namespace DemoMaui.GraphQL.State
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class AssetEntity
    {
        public AssetEntity(global::System.String symbol = default !, global::System.String name = default !, global::StrawberryShake.EntityId price = default !)
        {
            Symbol = symbol;
            Name = name;
            Price = price;
        }

        public global::System.String Symbol { get; }

        public global::System.String Name { get; }

        public global::StrawberryShake.EntityId Price { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class AssetPriceEntity
    {
        public AssetPriceEntity(global::System.Double lastPrice = default !)
        {
            LastPrice = lastPrice;
        }

        public global::System.Double LastPrice { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class GetAssetsResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::DemoMaui.GraphQL.GetAssetsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::DemoMaui.GraphQL.State.AssetEntity, GetAssets_Assets_Nodes_Asset> _getAssets_Assets_Nodes_AssetFromAssetEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::DemoMaui.GraphQL.State.AssetPriceEntity, GetAssets_Assets_Nodes_Price_AssetPrice> _getAssets_Assets_Nodes_Price_AssetPriceFromAssetPriceEntityMapper;
        public GetAssetsResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::DemoMaui.GraphQL.State.AssetEntity, GetAssets_Assets_Nodes_Asset> getAssets_Assets_Nodes_AssetFromAssetEntityMapper, global::StrawberryShake.IEntityMapper<global::DemoMaui.GraphQL.State.AssetPriceEntity, GetAssets_Assets_Nodes_Price_AssetPrice> getAssets_Assets_Nodes_Price_AssetPriceFromAssetPriceEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getAssets_Assets_Nodes_AssetFromAssetEntityMapper = getAssets_Assets_Nodes_AssetFromAssetEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getAssets_Assets_Nodes_AssetFromAssetEntityMapper));
            _getAssets_Assets_Nodes_Price_AssetPriceFromAssetPriceEntityMapper = getAssets_Assets_Nodes_Price_AssetPriceFromAssetPriceEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getAssets_Assets_Nodes_Price_AssetPriceFromAssetPriceEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::DemoMaui.GraphQL.IGetAssetsResult);
        public GetAssetsResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetAssetsResultInfo info)
            {
                return new GetAssetsResult(MapIGetAssets_Assets(info.Assets, snapshot));
            }

            throw new global::System.ArgumentException("GetAssetsResultInfo expected.");
        }

        private global::DemoMaui.GraphQL.IGetAssets_Assets? MapIGetAssets_Assets(global::DemoMaui.GraphQL.State.AssetsConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetAssets_Assets returnValue = default !;
            if (data?.__typename.Equals("AssetsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetAssets_Assets_AssetsConnection(MapIGetAssets_Assets_NodesNonNullableArray(data.Nodes, snapshot), MapNonNullableIGetAssets_Assets_PageInfo(data.PageInfo ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::DemoMaui.GraphQL.IGetAssets_Assets_Nodes>? MapIGetAssets_Assets_NodesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var assets = new global::System.Collections.Generic.List<global::DemoMaui.GraphQL.IGetAssets_Assets_Nodes>();
            foreach (global::StrawberryShake.EntityId child in list)
            {
                assets.Add(MapNonNullableIGetAssets_Assets_Nodes(child, snapshot));
            }

            return assets;
        }

        private global::DemoMaui.GraphQL.IGetAssets_Assets_Nodes MapNonNullableIGetAssets_Assets_Nodes(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("Asset", global::System.StringComparison.Ordinal))
            {
                return _getAssets_Assets_Nodes_AssetFromAssetEntityMapper.Map(snapshot.GetEntity<global::DemoMaui.GraphQL.State.AssetEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::DemoMaui.GraphQL.IGetAssets_Assets_Nodes_Price MapNonNullableIGetAssets_Assets_Nodes_Price(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("AssetPrice", global::System.StringComparison.Ordinal))
            {
                return _getAssets_Assets_Nodes_Price_AssetPriceFromAssetPriceEntityMapper.Map(snapshot.GetEntity<global::DemoMaui.GraphQL.State.AssetPriceEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::DemoMaui.GraphQL.IGetAssets_Assets_PageInfo MapNonNullableIGetAssets_Assets_PageInfo(global::DemoMaui.GraphQL.State.PageInfoData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetAssets_Assets_PageInfo returnValue = default !;
            if (data.__typename.Equals("PageInfo", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetAssets_Assets_PageInfo_PageInfo(data.EndCursor);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class GetAssetsResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetAssetsResultInfo(global::DemoMaui.GraphQL.State.AssetsConnectionData? assets, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Assets = assets;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::DemoMaui.GraphQL.State.AssetsConnectionData? Assets { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetAssetsResultInfo(Assets, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class OnPriceChangeResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::DemoMaui.GraphQL.OnPriceChangeResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::DemoMaui.GraphQL.State.AssetPriceEntity, OnPriceChange_OnPriceChange_AssetPrice> _onPriceChange_OnPriceChange_AssetPriceFromAssetPriceEntityMapper;
        public OnPriceChangeResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::DemoMaui.GraphQL.State.AssetPriceEntity, OnPriceChange_OnPriceChange_AssetPrice> onPriceChange_OnPriceChange_AssetPriceFromAssetPriceEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _onPriceChange_OnPriceChange_AssetPriceFromAssetPriceEntityMapper = onPriceChange_OnPriceChange_AssetPriceFromAssetPriceEntityMapper ?? throw new global::System.ArgumentNullException(nameof(onPriceChange_OnPriceChange_AssetPriceFromAssetPriceEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::DemoMaui.GraphQL.IOnPriceChangeResult);
        public OnPriceChangeResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is OnPriceChangeResultInfo info)
            {
                return new OnPriceChangeResult(MapNonNullableIOnPriceChange_OnPriceChange(info.OnPriceChange, snapshot));
            }

            throw new global::System.ArgumentException("OnPriceChangeResultInfo expected.");
        }

        private global::DemoMaui.GraphQL.IOnPriceChange_OnPriceChange MapNonNullableIOnPriceChange_OnPriceChange(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("AssetPrice", global::System.StringComparison.Ordinal))
            {
                return _onPriceChange_OnPriceChange_AssetPriceFromAssetPriceEntityMapper.Map(snapshot.GetEntity<global::DemoMaui.GraphQL.State.AssetPriceEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class OnPriceChangeResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public OnPriceChangeResultInfo(global::StrawberryShake.EntityId onPriceChange, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            OnPriceChange = onPriceChange;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        public global::StrawberryShake.EntityId OnPriceChange { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new OnPriceChangeResultInfo(OnPriceChange, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class GetAssetsBuilder : global::StrawberryShake.OperationResultBuilder<global::DemoMaui.GraphQL.IGetAssetsResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public GetAssetsBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::DemoMaui.GraphQL.IGetAssetsResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::DemoMaui.GraphQL.IGetAssetsResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::DemoMaui.GraphQL.State.AssetsConnectionData? assetsId = default !;
            _entityStore.Update(session =>
            {
                assetsId = Deserialize_IGetAssets_Assets(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "assets"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new GetAssetsResultInfo(assetsId, entityIds, snapshot.Version);
        }

        private global::DemoMaui.GraphQL.State.AssetsConnectionData? Deserialize_IGetAssets_Assets(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("AssetsConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::DemoMaui.GraphQL.State.AssetsConnectionData(typename, nodes: Update_IGetAssets_Assets_NodesEntityNonNullableArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds), pageInfo: Deserialize_NonNullableIGetAssets_Assets_PageInfo(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pageInfo")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Update_IGetAssets_Assets_NodesEntityNonNullableArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var assets = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                assets.Add(Update_NonNullableIGetAssets_Assets_NodesEntity(session, child, entityIds));
            }

            return assets;
        }

        private global::StrawberryShake.EntityId Update_NonNullableIGetAssets_Assets_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Asset", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::DemoMaui.GraphQL.State.AssetEntity? entity))
                {
                    session.SetEntity(entityId, new global::DemoMaui.GraphQL.State.AssetEntity(Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "symbol")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), Update_NonNullableIGetAssets_Assets_Nodes_PriceEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::DemoMaui.GraphQL.State.AssetEntity(Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "symbol")), Deserialize_NonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), Update_NonNullableIGetAssets_Assets_Nodes_PriceEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "price"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String Deserialize_NonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::StrawberryShake.EntityId Update_NonNullableIGetAssets_Assets_Nodes_PriceEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("AssetPrice", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::DemoMaui.GraphQL.State.AssetPriceEntity? entity))
                {
                    session.SetEntity(entityId, new global::DemoMaui.GraphQL.State.AssetPriceEntity(Deserialize_NonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastPrice"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::DemoMaui.GraphQL.State.AssetPriceEntity(Deserialize_NonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastPrice"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Double Deserialize_NonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }

        private global::DemoMaui.GraphQL.State.PageInfoData Deserialize_NonNullableIGetAssets_Assets_PageInfo(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PageInfo", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::DemoMaui.GraphQL.State.PageInfoData(typename, endCursor: Deserialize_String(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "endCursor")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? Deserialize_String(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class OnPriceChangeBuilder : global::StrawberryShake.OperationResultBuilder<global::DemoMaui.GraphQL.IOnPriceChangeResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Double, global::System.Double> _floatParser;
        public OnPriceChangeBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::DemoMaui.GraphQL.IOnPriceChangeResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            ResultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _floatParser = serializerResolver.GetLeafValueParser<global::System.Double, global::System.Double>("Float") ?? throw new global::System.ArgumentException("No serializer for type `Float` found.");
        }

        protected override global::StrawberryShake.IOperationResultDataFactory<global::DemoMaui.GraphQL.IOnPriceChangeResult> ResultDataFactory { get; }

        protected override global::StrawberryShake.IOperationResultDataInfo BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId onPriceChangeId = default !;
            _entityStore.Update(session =>
            {
                onPriceChangeId = Update_NonNullableIOnPriceChange_OnPriceChangeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "onPriceChange"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            return new OnPriceChangeResultInfo(onPriceChangeId, entityIds, snapshot.Version);
        }

        private global::StrawberryShake.EntityId Update_NonNullableIOnPriceChange_OnPriceChangeEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("AssetPrice", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::DemoMaui.GraphQL.State.AssetPriceEntity? entity))
                {
                    session.SetEntity(entityId, new global::DemoMaui.GraphQL.State.AssetPriceEntity(Deserialize_NonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastPrice"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::DemoMaui.GraphQL.State.AssetPriceEntity(Deserialize_NonNullableDouble(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lastPrice"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Double Deserialize_NonNullableDouble(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _floatParser.Parse(obj.Value.GetDouble()!);
        }
    }

    ///<summary>A connection to a list of items.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class AssetsConnectionData
    {
        public AssetsConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? nodes = default !, global::DemoMaui.GraphQL.State.PageInfoData? pageInfo = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
            PageInfo = pageInfo;
        }

        public global::System.String __typename { get; }

        ///<summary>A flattened list of the nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId>? Nodes { get; }

        ///<summary>Information to aid in pagination.</summary>
        public global::DemoMaui.GraphQL.State.PageInfoData? PageInfo { get; }
    }

    ///<summary>Information about pagination in a connection.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class PageInfoData
    {
        public PageInfoData(global::System.String __typename, global::System.String? endCursor = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            EndCursor = endCursor;
        }

        public global::System.String __typename { get; }

        ///<summary>When paginating forwards, the cursor to continue.</summary>
        public global::System.String? EndCursor { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class GetAssets_Assets_Nodes_AssetFromAssetEntityMapper : global::StrawberryShake.IEntityMapper<global::DemoMaui.GraphQL.State.AssetEntity, GetAssets_Assets_Nodes_Asset>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::DemoMaui.GraphQL.State.AssetPriceEntity, GetAssets_Assets_Nodes_Price_AssetPrice> _getAssets_Assets_Nodes_Price_AssetPriceFromAssetPriceEntityMapper;
        public GetAssets_Assets_Nodes_AssetFromAssetEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::DemoMaui.GraphQL.State.AssetPriceEntity, GetAssets_Assets_Nodes_Price_AssetPrice> getAssets_Assets_Nodes_Price_AssetPriceFromAssetPriceEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getAssets_Assets_Nodes_Price_AssetPriceFromAssetPriceEntityMapper = getAssets_Assets_Nodes_Price_AssetPriceFromAssetPriceEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getAssets_Assets_Nodes_Price_AssetPriceFromAssetPriceEntityMapper));
        }

        public GetAssets_Assets_Nodes_Asset Map(global::DemoMaui.GraphQL.State.AssetEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetAssets_Assets_Nodes_Asset(entity.Symbol, entity.Name, MapNonNullableIGetAssets_Assets_Nodes_Price(entity.Price, snapshot));
        }

        private global::DemoMaui.GraphQL.IGetAssets_Assets_Nodes_Price MapNonNullableIGetAssets_Assets_Nodes_Price(global::StrawberryShake.EntityId entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId.Name.Equals("AssetPrice", global::System.StringComparison.Ordinal))
            {
                return _getAssets_Assets_Nodes_Price_AssetPriceFromAssetPriceEntityMapper.Map(snapshot.GetEntity<global::DemoMaui.GraphQL.State.AssetPriceEntity>(entityId) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class GetAssets_Assets_Nodes_Price_AssetPriceFromAssetPriceEntityMapper : global::StrawberryShake.IEntityMapper<global::DemoMaui.GraphQL.State.AssetPriceEntity, GetAssets_Assets_Nodes_Price_AssetPrice>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetAssets_Assets_Nodes_Price_AssetPriceFromAssetPriceEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetAssets_Assets_Nodes_Price_AssetPrice Map(global::DemoMaui.GraphQL.State.AssetPriceEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetAssets_Assets_Nodes_Price_AssetPrice(entity.LastPrice);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class OnPriceChange_OnPriceChange_AssetPriceFromAssetPriceEntityMapper : global::StrawberryShake.IEntityMapper<global::DemoMaui.GraphQL.State.AssetPriceEntity, OnPriceChange_OnPriceChange_AssetPrice>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public OnPriceChange_OnPriceChange_AssetPriceFromAssetPriceEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public OnPriceChange_OnPriceChange_AssetPrice Map(global::DemoMaui.GraphQL.State.AssetPriceEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new OnPriceChange_OnPriceChange_AssetPrice(entity.LastPrice);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class CryptoClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Asset" => ParseAssetEntityId(obj, __typename),
                "AssetPrice" => ParseAssetPriceEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Asset" => FormatAssetEntityId(entityId),
                "AssetPrice" => FormatAssetPriceEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseAssetEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatAssetEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseAssetPriceEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatAssetPriceEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public partial class CryptoClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public CryptoClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "13.0.0.0")]
    public static partial class CryptoClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::DemoMaui.GraphQL.State.CryptoClientStoreAccessor> AddCryptoClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::DemoMaui.GraphQL.State.CryptoClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DemoMaui.GraphQL.GetAssetsQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DemoMaui.GraphQL.OnPriceChangeSubscription>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DemoMaui.GraphQL.CryptoClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DemoMaui.GraphQL.ICryptoClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::DemoMaui.GraphQL.State.CryptoClientStoreAccessor>("CryptoClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(services, sp =>
            {
                var sessionPool = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.ISessionPool>(parentServices);
                return new global::StrawberryShake.Transport.WebSockets.WebSocketConnection(async ct => await sessionPool.CreateAsync("CryptoClient", ct));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("CryptoClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::DemoMaui.GraphQL.State.AssetEntity, global::DemoMaui.GraphQL.GetAssets_Assets_Nodes_Asset>, global::DemoMaui.GraphQL.State.GetAssets_Assets_Nodes_AssetFromAssetEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::DemoMaui.GraphQL.State.AssetPriceEntity, global::DemoMaui.GraphQL.GetAssets_Assets_Nodes_Price_AssetPrice>, global::DemoMaui.GraphQL.State.GetAssets_Assets_Nodes_Price_AssetPriceFromAssetPriceEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::DemoMaui.GraphQL.State.AssetPriceEntity, global::DemoMaui.GraphQL.OnPriceChange_OnPriceChange_AssetPrice>, global::DemoMaui.GraphQL.State.OnPriceChange_OnPriceChange_AssetPriceFromAssetPriceEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::DemoMaui.GraphQL.IGetAssetsResult>, global::DemoMaui.GraphQL.State.GetAssetsResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::DemoMaui.GraphQL.IGetAssetsResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DemoMaui.GraphQL.IGetAssetsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::DemoMaui.GraphQL.IGetAssetsResult>, global::DemoMaui.GraphQL.State.GetAssetsBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::DemoMaui.GraphQL.IGetAssetsResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::DemoMaui.GraphQL.IGetAssetsResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::DemoMaui.GraphQL.IGetAssetsResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::DemoMaui.GraphQL.GetAssetsQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::DemoMaui.GraphQL.IGetAssetsQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DemoMaui.GraphQL.GetAssetsQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::DemoMaui.GraphQL.IOnPriceChangeResult>, global::DemoMaui.GraphQL.State.OnPriceChangeResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::DemoMaui.GraphQL.IOnPriceChangeResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DemoMaui.GraphQL.IOnPriceChangeSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::DemoMaui.GraphQL.IOnPriceChangeResult>, global::DemoMaui.GraphQL.State.OnPriceChangeBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::DemoMaui.GraphQL.IOnPriceChangeResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::DemoMaui.GraphQL.IOnPriceChangeResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.WebSockets.IWebSocketConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::DemoMaui.GraphQL.IOnPriceChangeResult>>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IResultPatcher<global::System.Text.Json.JsonDocument>, global::StrawberryShake.Json.JsonResultPatcher>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::DemoMaui.GraphQL.OnPriceChangeSubscription>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::DemoMaui.GraphQL.IOnPriceChangeSubscription>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DemoMaui.GraphQL.OnPriceChangeSubscription>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::DemoMaui.GraphQL.State.CryptoClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::DemoMaui.GraphQL.CryptoClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::DemoMaui.GraphQL.ICryptoClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::DemoMaui.GraphQL.CryptoClient>(sp));
            return services;
        }

        private sealed class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}
